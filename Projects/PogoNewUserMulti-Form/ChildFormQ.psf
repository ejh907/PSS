<File version="2.1">
  <FileID>baa04bc4-1eaa-423e-9efb-074977805c4a</FileID>
  <Preview>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
TsfOBGnWOxO15cAhfbpirfNvBQyZs/OR/k6t8huv8dNnadv2rXrhFz/VtGWbtHbOLEWXtCrx3C69
+Ie3tMjvHb07z19pUYH6zYuva+GHE/XzN2cpMmiffvkvL2jFkjma9MFChYQEmYFso5Z9+CdNmPmp
zEmpNOSV3/hfa+FnO+U36Y+as3SFXvzNiwqKK9Tdu/dUFHdOzzzzog4c2KX/9/Nf6VzoNb3/9qum
5CzT3/zkZzoREiG/yW9omRkw/8ff/nftver7TkB7SYLemfmxMlLj9MrzZh+Wz9drE2fpQsBBzZ63
QfZTjcGhOypJvqzfPPPPemfqVL30xlSVNLRqz8r39OrE9+VvCtHrz/1fvTlnlfxXLtPBk6c17bWX
tGzlcv1+3CTFJ0Tp1//wP7Rg+ad69fUJCgg4rnHP/177D+7RL3/xL9p3/KTmzlyg/LJihYYkaOC2
R3OmjNM0v0XavnWjfvmzv9X8TXu0Zv4iBZw5af5W47Ri6Wy9+c5ixYWd1N//3T9oxYqlGj/VTycO
7tALf5io/Xs26P88+7JOHj2ohUv9lZ0QrF8/+ztt2rRRv3v2OV1MKtf5XYu0+sBl53WY/9o/6G+e
/ZPM+E8BIISQb5mnXgDsVQC9/UPqvtmoY3u2atPmHSqsadWdAa8S4+PUcbtXxbnpKqhqVrcpCjs3
b9bx4CgNmYH0dmuN9mzdrCNnr2loZFhFaVHabOZfiEhyvrhWV5ymzZs2KfBKtG739DnfareFY6j/
loKOHTADzCaFR8WpsKRYWampqm7q0PBwv8LPHNbmrXtV19GtkYHbOnN0n46cOqPMwkpFnN6hd96d
qd17Dqqgtl09nR4d3+8v/92HVNfWpb6ebufSvdyEcAWa/fTUlWqL3afINA0NDzvfeB8Y6FP81dPa
5L9DF0KuqeVWr6qy47Rl63YFXQlTY4dX9YUp2rJlm85fClV5rUd9fX3qbG1QXEKi+sx6cmKvOMea
U9WqG02VSk7NUY9Zxr6mw0PDSg07pSlT3lNiYZ3zxcnhQa9CTh91jjkkIkb55phz0tKcfa7OS3DW
FZNV4XyBMfziaWefQ6KzNDIyopSIc9q0ZbvZ1wiVlZcrMz1bVWUFCjclrM9sq+92i07t32n+dtt1
PTZBxWUlykhK0c3efmVEXjDr3qLCuhvyttcpKOCoM51SUGv2a0AhgQe0dec+XY1OVEVpiVLMcQwP
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AADc5K/+6v8D9AA0ZgoVt68AAAAASUVORK5CYII=</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formActiveDirectoryGroup" children="Controls">
    <Property name="AutoScaleDimensions">6, 13</Property>
    <Property name="AutoScaleMode">Font</Property>
    <Property name="ClientSize">1351, 514</Property>
    <Property name="Name">formActiveDirectoryGroup</Property>
    <Property name="StartPosition">CenterParent</Property>
    <Property name="Text">Active Directory Groups</Property>
    <Event name="Load">formActiveDirectoryGroup_Load</Event>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelChooseGroupsToAddFor" children="Controls">
      <Property name="Font">Microsoft Sans Serif, 15pt</Property>
      <Property name="Location">41, 9</Property>
      <Property name="Name">labelChooseGroupsToAddFor</Property>
      <Property name="Size">725, 30</Property>
      <Property name="TabIndex">33</Property>
      <Property name="Text">Choose Groups to add for $Global:GlobalUN</Property>
    </Object>
    <Object type="System.Windows.Forms.CheckedListBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="checkedlistboxGroupMembership" children="Controls">
      <Property name="CheckOnClick">True</Property>
      <Property name="ColumnWidth">200</Property>
      <Property name="FormattingEnabled">True</Property>
      <Property name="Location">41, 42</Property>
      <Property name="MultiColumn">True</Property>
      <Property name="Name">checkedlistboxGroupMembership</Property>
      <Property name="Size">1297, 379</Property>
      <Property name="TabIndex">2</Property>
      <Event name="ItemCheck">checkedlistboxGroupMembership_ItemCheck</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonOK" children="Controls">
      <Property name="Anchor">Bottom, Right</Property>
      <Property name="DialogResult">OK</Property>
      <Property name="Location">1183, 479</Property>
      <Property name="Name">buttonOK</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">&amp;OK</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonOK_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonCancel" children="Controls">
      <Property name="Anchor">Bottom, Right</Property>
      <Property name="CausesValidation">False</Property>
      <Property name="DialogResult">Cancel</Property>
      <Property name="Location">1264, 479</Property>
      <Property name="Name">buttonCancel</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">0</Property>
      <Property name="Text">&amp;Cancel</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
    </Object>
  </Object>
  <Code><![CDATA[

$formActiveDirectoryGroup_Load={
	#TODO: Initialize Form Controls here
	
}


#region Control Helper Functions
function Get-CheckedNode
{
<#
	.SYNOPSIS
		This function collects a list of checked nodes in a TreeView

	.DESCRIPTION
		This function collects a list of checked nodes in a TreeView

	.PARAMETER  $NodeCollection
		The collection of nodes to search

	.PARAMETER  $CheckedNodes
		The ArrayList that will contain the all the checked items
	
	.EXAMPLE
		$CheckedNodes = New-Object System.Collections.ArrayList
		Get-CheckedNode $treeview1.Nodes $CheckedNodes
		foreach($node in $CheckedNodes)
		{	
			Write-Host $node.Text
		}
#>
	param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes
	)
	
	foreach ($Node in $NodeCollection)
	{
		if ($Node.Checked)
		{
			[void]$CheckedNodes.Add($Node)
		}
		Get-CheckedNode $Node.Nodes $CheckedNodes
	}
}


function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}
#endregion

##Pull Group Data
$ConnectionString = 'server=pgosqlp03;database=Qualtrax;trusted_connection=true;'

## SQL Query
$SqlConnection = New-Object System.Data.SqlClient.SqlConnection
$SqlConnection.ConnectionString = $ConnectionString

$SqlCmd = New-Object System.Data.SqlClient.SqlCommand
$sqlcmd.CommandText = 'SELECT TOP 1000 Id,Name FROM Qualtrax.dbo.UG_UserGroup WHERE IsGroup = 1 AND Enabled = 1 ORDER BY NAME'
$sqlcmd.Connection = $SqlConnection
$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
$SqlAdapter.SelectCommand = $SqlCmd
$DataSet = New-Object System.Data.DataSet
$SqlAdapter.Fill($DataSet)
$SqlConnection.Close()

$GroupHash = @{}

ForEach ($Row in $DataSet.Tables[0].Rows)
{
	$GroupHash.Add($($Row.Name), ($Row.Id))
}





## Find UserID
$un = $Global:GlobalUN
$search = "'" + $un + "'"
$SqlConnection = New-Object System.Data.SqlClient.SqlConnection
$SqlConnection.ConnectionString = $ConnectionString
$SqlCmd = New-Object System.Data.SqlClient.SqlCommand
$sqlcmd.CommandText = "SELECT TOP 1 Id FROM Qualtrax.dbo.UG_UserGroup WHERE USERID = $search"
$sqlcmd.Connection = $SqlConnection
$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
$SqlAdapter.SelectCommand = $SqlCmd
$DataSet = New-Object System.Data.DataSet
$SqlAdapter.Fill($DataSet)
$SqlConnection.Close()

$UID = foreach ($Row in $dataset.Tables[0].Rows)
{
	"$($Row.Id)"
}

Update-ListBox $checkedlistboxGroupMembership ($GroupHash.Keys | Out-String -Stream)
$GroupMembership = New-Object System.Collections.ArrayList

$buttonOK_Click={
	#TODO: Place custom script here
	## Create Members Array
	$members = @($UID)
	$JSON = Convertto-JSON @{
		'Members' = $members
	}
	$Header = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
	$Header.add('Accept', 'application/json')
	$Header.add('User-Agent', 'PogoNewUser')
	$Header.add('Content-Type', 'application/json')
	$Header.add('Authorization', 'Bearer 3f7d71b0-bb8b-4bf7-a7ce-0712268a0432')
	ForEach ($GroupMembership in $GroupMembership)
	{
		$add = $GroupMembership
		$GID = $GroupHash[$add]
		Try { Invoke-WebRequest -uri "http://qualtrax.smmpogo.loc/api/groups/$GID/members" -Method POST -Headers $Header -Body $JSON }
		Catch
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Qualtrax Group Membership Failed.  Please add manually', 'Error', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
		}
	}
}

$checkedlistboxGroupMembership_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.ItemCheckEventArgs]
	#TODO: Place custom script here
	$GroupMembership.Add($checkedlistboxGroupMembership.Text) > $null
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>