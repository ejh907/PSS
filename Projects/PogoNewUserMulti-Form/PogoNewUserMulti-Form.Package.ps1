#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 13871e5c-2b4a-4099-a790-2b75968584fd
# Source File: C:\Users\ehendricks\Documents\SAPIEN\PowerShell Studio\Projects\PogoNewUserMulti-Form\PogoNewUserMulti-Form.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
pQIAAB+LCAAAAAAABACdkkFvgjAUx+8mfgfCHQEHA5Law2ZYPOhU3K5LhYd0q5S0oPHbr5Pi3Nzi
slt/6f/93mte0RJSvgNxGJOa4H7PMNBc8FdI6yMofAYhKS/xcOAguwN9F1MGkzF2b8LABT+1hmuP
WJ4TRRYJIkdh4Ee3oR96eYZsHdalusvqUAFW4nPs5Jxlqp1hn3eTGjQadw1l2ch0TJzURNRNNaik
bHv9ljSWkIOAMoW4KdNaPWdkJgXfW1NCy5iL7UslcxN3pIT5FWFSEAHquBIN/KiflDv+BtYD42vC
lN41cXuWyu7+c9z7QiU+5z3hHwa+qlx8cy4upC206zitr6VHQTe0JOwjMCNbwHO+4TPYP0kQ04bV
1NJjVqoK2Rfxfg/ZX77lOw1lxkalAgAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.140
     Generated on:       6/4/2017 4:53 PM
     Generated by:       EHendricks
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2017
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ZAMAAB+LCAAAAAAABAC9k99Lw0AMx98F/4djz+Xa2tU6uBZkshdBxYn6mnbpOLwfI7lz9L93mzJF
HwSRkpd8E5IPIYm6x86/Ig1XEEDsHNbe1ZMzmU+a0xMh1C3ptXZgFtrgDVhslgEoxI3cMKv0R/ZQ
c8mMtjUa+aA/I0NjufNkdJuIxw/WVGZ7S8Q8mhAJa4cxEJhE3MVdj+4ahwf/gq5uqwrKrjzPZ8UU
s4uZSo9dv1OWAwe0YzDkk3Yrv2W58GR5FOJ+U+OACLbarf/Cyoq+7Ks+z1dlBgX8znq2ZpSZ5p7w
/0FH+X7yKv36Vc0baArZVmQDAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
Cxna6gAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$linklabelApplicationDocumenta = New-Object 'System.Windows.Forms.LinkLabel'
	$linklabelAccountNotificationT = New-Object 'System.Windows.Forms.LinkLabel'
	$buttonChooseQualtraxGroups = New-Object 'System.Windows.Forms.Button'
	$buttonChooseActiveDirector = New-Object 'System.Windows.Forms.Button'
	$comboboxQualtrax = New-Object 'System.Windows.Forms.ComboBox'
	$labelQualtraxRequired = New-Object 'System.Windows.Forms.Label'
	$comboboxJDE = New-Object 'System.Windows.Forms.ComboBox'
	$labelJDEdwardsRequired = New-Object 'System.Windows.Forms.Label'
	$labelTypeOfEmployee = New-Object 'System.Windows.Forms.Label'
	$comboboxEmployeeType = New-Object 'System.Windows.Forms.ComboBox'
	$statusbar = New-Object 'System.Windows.Forms.StatusBar'
	$labelIncrement = New-Object 'System.Windows.Forms.Label'
	$textboxIncrement = New-Object 'System.Windows.Forms.TextBox'
	$buttonExitProgram = New-Object 'System.Windows.Forms.Button'
	$testboxSV = New-Object 'System.Windows.Forms.TextBox'
	$labelSupervisor = New-Object 'System.Windows.Forms.Label'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$comboboxdept = New-Object 'System.Windows.Forms.ComboBox'
	$textboxJT = New-Object 'System.Windows.Forms.TextBox'
	$labelJobTitle = New-Object 'System.Windows.Forms.Label'
	$buttonCreateAccounts = New-Object 'System.Windows.Forms.Button'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$textboxPW = New-Object 'System.Windows.Forms.TextBox'
	$labelDepartment = New-Object 'System.Windows.Forms.Label'
	$textboxLN = New-Object 'System.Windows.Forms.TextBox'
	$labelLastName = New-Object 'System.Windows.Forms.Label'
	$labelFirstName = New-Object 'System.Windows.Forms.Label'
	$textboxFN = New-Object 'System.Windows.Forms.TextBox'
	$Title = New-Object 'System.Windows.Forms.Label'
	$buttonButton1 = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$MainForm_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	
	
	
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Get-CheckedNodes 
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNodes $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param(
		[ValidateNotNull()]
		[System.Windows.Forms.TreeNodeCollection] $NodeCollection,
		[ValidateNotNull()]
		[System.Collections.ArrayList]$CheckedNodes)
		
		foreach($Node in $NodeCollection)
		{
			if($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNodes $Node.Nodes $CheckedNodes
		}
	}
	
	
	function Load-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	
	Load-ComboBox $comboboxdept (Get-ADOrganizationalUnit -Filter * -SearchBase 'OU=Dept,OU=Mine,OU=Pogo,DC=smmpogo,DC=loc' -SearchScope OneLevel | Where-Object Name -notlike *WS* | Select-Object Name) "Name"
	
	function Sort-ListViewColumn 
	{
		<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
	
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
	
		.PARAMETER ListView
			The ListView control to sort.
	
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
			
		.PARAMETER  SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
	#>
		param(	
				[ValidateNotNull()]
				[Parameter(Mandatory=$true)]
				[System.Windows.Forms.ListView]$ListView,
				[Parameter(Mandatory=$true)]
				[int]$ColumnIndex,
				[System.Windows.Forms.SortOrder]$SortOrder = 'None')
		
		if(($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
			try{
			$local:type = [ListViewItemComparer]
		}
		catch{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@  | Out-Null
		}
		#endregion
		
		if($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort()#Sort the items
		}
		else
		{
			if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending	
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder) 
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($lvGroup -eq $null)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($SubItems -ne $null)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($lvGroup -ne $null)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($lvGroup -ne $null)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Load-ListBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$listBox.Items.Clear()	
		}
		
		if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)	
		}
	
		$listBox.DisplayMember = $DisplayMember
	}
	
	
	#endregion
	
	$buttonCreateAccounts_Click = {
		#Get Connected to MSOL
		Import-Module MSOnline
		#	$LiveCred = Get-Credential
		$LiveCred = $Host.ui.PromptForCredential('Microsoft Office365', 'Please enter your username and password.', '', 'NetBiosUserName')
		New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.outlook.com/powershell/ -Credential $LiveCred -Authentication Basic –AllowRedirection
		Connect-MSOLService –credential $LiveCred -ErrorVariable CredCheck
		If ($CredCheck)
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Username or password is incorrect.  Please try again', 'Error', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
			Return
		}
		
		## Pull information
		$fn = $textboxFN.Text
		$ln = $textboxLN.Text
		$inc = $textboxIncrement.Text
		$un = ($fn.substring(0, 1) + $ln) + $inc
		$upn = $un + '@smmpogo.com'
		$dept = $comboboxdept.Text
		$supervisor = $testboxSV.Text
		$securestringpw = $textboxPW.Text | ConvertTo-SecureString -AsPlainText -Force
		$path = "OU=Usr,OU=$dept,OU=Dept,OU=Mine,OU=Pogo,DC=smmpogo,DC=loc"
		
		
		##Check username
		$untest = Get-ADUser $un
		if (!$untest)
		{
		}
		Else
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Username in use.  Please increment and try again', 'Username Test', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
			Return
		}
		
		##Check Supervisor
		$svtest = Get-ADUser $supervisor
		if (!$svtest)
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Supervisor username not valid.  Please try again.', 'Supervisor Test', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
			Return
		}
		Else
		{
		}
		
		
		##Set Standard Property Set
		$User = @{
			Name = $fn + ' ' + $ln
			GivenName = $fn
			Surname = $ln
			samAccountName = $un
			userPrincipalName = $upn
			EMailAddress = "$un@smmpogo.com"
			HomeDrive = 'H:\'
			DisplayName = $fn + ' ' + $ln
			AccountPassword = $securestringpw
			ChangePasswordAtLogon = $true
			Enabled = $true
			Description = "POGO $dept"
			Title = $textboxJT.Text
			Department = $dept
			Manager = $supervisor
			Company = 'SMMPOGO'
			StreetAddress = 'PO 145'
			City = 'Delta Junction'
			State = 'AK'
			PostalCode = '98387'
			Path = $path
			
			
			
		}
		
		## Create Properties Object Dependent on Employee, Temp, or Contractor
		## Temp
		If ($comboboxEmployeeType.Text -eq 'Temporary Employee')
		{
		$User.EmailAddress = ''
		$User.Description = "POGO Temp $dept"
		}
		## Sumitomo
		If ($comboboxEmployeeType.Text -eq 'Sumitomo Employee')
		{
			$User.Description = "Sumitomo $dept"
		}
		## Contractor
		If ($comboboxEmployeeType.Text -eq 'Contractor')
		{
			$User.HomeDrive = ''
			$User.EmailAddress = ''
			$User.Description = "CONTRACTOR $dept"
		}
		
		
		
		
		New-ADUser @User
		
		## Create and permission Home Drive
		$homedir = "\\pgofilp02\homedrives$"
		if (-not (Test-Path "$homeDir\$un"))
		{
		$acl = Get-Acl (New-Item -Path $homedir -Name $un -ItemType Directory)
		
		# Make sure access rules inherited from parent folders.
		$acl.SetAccessRuleProtection($false, $true)
		
		$ace = "smmpogo\$un", "Modify", "ContainerInherit,ObjectInherit", "None", "Allow"
		$objACE = New-Object System.Security.AccessControl.FileSystemAccessRule($ace)
		$acl.AddAccessRule($objACE)
		Set-ACL -Path "$homeDir\$un" -AclObject $acl
		}
		
		## Add Default Groups
		Add-ADGroupMember -Identity 'All Users POGO' -Members $un
		
		## Write Properties
		$Properties = (Get-AdUser -Properties * -Identity $un)
		
		##Set MSOL Proxy Properties
		Add-PSSnapin quest.activeroles.admanagement
		set-qaduser $un -objectAttributes @{ 'proxyAddresses' = "SMTP:$fn.$ln@smmpogo.com" }
		
		##Set JDE Properties
		
		If ($comboboxJDE.Text -eq 'Yes')
		{
			set-qaduser $un -objectAttributes @{ 'ESIJDESSOJdeUserName' = $un }
			set-qaduser $un -objectAttributes @{ 'ESIJDESSOJdeEnvironment' = 'JPD900' }
			set-qaduser $un -objectAttributes @{ 'ESIJDESSOJdeUserRole' = '*ALL' }
		}
		## Qualtrax User Creation
		If ($comboboxQualtrax.Text -eq 'Yes')
		{
			$hash = @{
				'loginName' = "smmpogo\$un"
				'emailAddress' = "$upn"
				'licenseType' = 'concurrent'
				'name' = "$fn $ln"
				'firstName' = "$fn"
				'lastName' = "$ln"
				'languagePreference' = 'en-us'
			}
			
			$JSON = $hash | convertto-json
			
			$Header = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
			$Header.add('Accept', 'application/json')
			$Header.add('User-Agent', 'PogoNewUser')
			$Header.add('Content-Type', 'application/json')
			$Header.add('Authorization', 'Bearer 3f7d71b0-bb8b-4bf7-a7ce-0712268a0432')
			Try
			{
				Invoke-WebRequest -uri 'http://pgoappp13.smmpogo.loc/api/users' -Method POST -Headers $Header -Body $JSON
			}
			
			Catch
			{
				[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
				[Windows.Forms.MessageBox]::Show('Qualtrax username in use.  Please investigate and create Qualtrax account manually', 'Error', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
					}
		}
		
		## Dirsync with O365
		## Start DirSync
		Invoke-Command -ComputerName "pgoadsp01" -ScriptBlock {C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -psconsolefile "C:\Program Files\Windows Azure Active Directory Sync\DirSyncConfigShell.psc1" -command "Start-OnlineCoexistenceSync"}
		#Connect-MSOLService
		while (!$MSOLUserTest)
		{
			$statusbar.Text = 'Syncing MSOL'
			$MSOLUserTest = Get-MsolUser -UserPrincipalName $upn}
		Get-MSOLUser -UserPrincipalName $upn | Set-MSOLUser -UsageLocation US
		Set-MsolUserLicense -UserPrincipalName $upn -AddLicenses "SMMPOGO1COM:StandardPack"
		
		
		
		## Send Completion Message
		Send-MailMessage -From PogoUserCreation@smmpogo.com -Subject "User Successfully Created" -To Helpdesk@smmpogo.com -Body "$Properties" -BodyAsHtml -SmtpServer smtp.smmpogo.loc
		$statusbar.Text = "$upn created successfully"
		$hash = @{
			'text' = "User $upn has been created"
			'username' = 'Cuthulu, Lord of Slack Messages'
		}
		
		$JSON = $hash | convertto-json
		
		$Header = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
		$Header.add('content-type', 'application/json')
		Try
		{
			Invoke-WebRequest -uri 'https://hooks.slack.com/services/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' -Method POST -Headers $Header -Body $JSON
		}
		
		Catch
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Faaaailleed', 'Test', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
		}
		
		## Prep globals for child form
		$Global:GlobalUN = ""
		function foo()
		{
		$Global:GlobalUN = "$un"
		}
		foo
	}
	
	$buttonExitProgram_Click={
		$MainForm.Close()
	}
	$comboboxJDE_SelectedIndexChanged={
		#TODO: Place custom script here
		
	}
	
	$labelTypeOfEmployee_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonChooseGroups_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonGroupPicker_Click={
		#TODO: Place custom script here
		If ((Show-ChildForm_psf) -eq 'OK')
		{
		}
	}
	
	$buttonChooseQualtraxGroups_Click={
		#TODO: Place custom script here
		If ((Show-ChildFormQ_psf) -eq 'OK')
		{
		}
	}
	
	$linklabelAccountNotificationT_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
		#TODO: Place custom script here
		G:\IT\Private\NewUserTemplate.msg
	}
	
	$linklabelApplicationDocumenta_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
		#TODO: Place custom script here
		(New-Object -Com Shell.Application).Open("http://confluence.smmpogo.loc:8090/x/HoCe")
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_comboboxQualtrax = $comboboxQualtrax.Text
		$script:MainForm_comboboxQualtrax_SelectedItem = $comboboxQualtrax.SelectedItem
		$script:MainForm_comboboxJDE = $comboboxJDE.Text
		$script:MainForm_comboboxJDE_SelectedItem = $comboboxJDE.SelectedItem
		$script:MainForm_comboboxEmployeeType = $comboboxEmployeeType.Text
		$script:MainForm_comboboxEmployeeType_SelectedItem = $comboboxEmployeeType.SelectedItem
		$script:MainForm_textboxIncrement = $textboxIncrement.Text
		$script:MainForm_testboxSV = $testboxSV.Text
		$script:MainForm_comboboxdept = $comboboxdept.Text
		$script:MainForm_comboboxdept_SelectedItem = $comboboxdept.SelectedItem
		$script:MainForm_textboxJT = $textboxJT.Text
		$script:MainForm_textboxPW = $textboxPW.Text
		$script:MainForm_textboxLN = $textboxLN.Text
		$script:MainForm_textboxFN = $textboxFN.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabelApplicationDocumenta.remove_LinkClicked($linklabelApplicationDocumenta_LinkClicked)
			$linklabelAccountNotificationT.remove_LinkClicked($linklabelAccountNotificationT_LinkClicked)
			$buttonChooseQualtraxGroups.remove_Click($buttonChooseQualtraxGroups_Click)
			$buttonChooseActiveDirector.remove_Click($buttonGroupPicker_Click)
			$comboboxJDE.remove_SelectedIndexChanged($comboboxJDE_SelectedIndexChanged)
			$labelTypeOfEmployee.remove_Click($labelTypeOfEmployee_Click)
			$buttonExitProgram.remove_Click($buttonExitProgram_Click)
			$buttonCreateAccounts.remove_Click($buttonCreateAccounts_Click)
			$MainForm.remove_Load($MainForm_Load)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($linklabelApplicationDocumenta)
	$MainForm.Controls.Add($linklabelAccountNotificationT)
	$MainForm.Controls.Add($buttonChooseQualtraxGroups)
	$MainForm.Controls.Add($buttonChooseActiveDirector)
	$MainForm.Controls.Add($comboboxQualtrax)
	$MainForm.Controls.Add($labelQualtraxRequired)
	$MainForm.Controls.Add($comboboxJDE)
	$MainForm.Controls.Add($labelJDEdwardsRequired)
	$MainForm.Controls.Add($labelTypeOfEmployee)
	$MainForm.Controls.Add($comboboxEmployeeType)
	$MainForm.Controls.Add($statusbar)
	$MainForm.Controls.Add($labelIncrement)
	$MainForm.Controls.Add($textboxIncrement)
	$MainForm.Controls.Add($buttonExitProgram)
	$MainForm.Controls.Add($testboxSV)
	$MainForm.Controls.Add($labelSupervisor)
	$MainForm.Controls.Add($picturebox1)
	$MainForm.Controls.Add($comboboxdept)
	$MainForm.Controls.Add($textboxJT)
	$MainForm.Controls.Add($labelJobTitle)
	$MainForm.Controls.Add($buttonCreateAccounts)
	$MainForm.Controls.Add($labelPassword)
	$MainForm.Controls.Add($textboxPW)
	$MainForm.Controls.Add($labelDepartment)
	$MainForm.Controls.Add($textboxLN)
	$MainForm.Controls.Add($labelLastName)
	$MainForm.Controls.Add($labelFirstName)
	$MainForm.Controls.Add($textboxFN)
	$MainForm.Controls.Add($Title)
	$MainForm.AcceptButton = $buttonCreateAccounts
	$MainForm.AutoScaleDimensions = '6, 13'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.CancelButton = $buttonExitProgram
	$MainForm.ClientSize = '1089, 558'
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'Pogo New User Creation'
	$MainForm.add_Load($MainForm_Load)
	#
	# linklabelApplicationDocumenta
	#
	$linklabelApplicationDocumenta.Location = '666, 510'
	$linklabelApplicationDocumenta.Name = 'linklabelApplicationDocumenta'
	$linklabelApplicationDocumenta.Size = '160, 23'
	$linklabelApplicationDocumenta.TabIndex = 38
	$linklabelApplicationDocumenta.TabStop = $True
	$linklabelApplicationDocumenta.Text = 'Application Documentation'
	$linklabelApplicationDocumenta.add_LinkClicked($linklabelApplicationDocumenta_LinkClicked)
	#
	# linklabelAccountNotificationT
	#
	$linklabelAccountNotificationT.Location = '666, 478'
	$linklabelAccountNotificationT.Name = 'linklabelAccountNotificationT'
	$linklabelAccountNotificationT.Size = '160, 23'
	$linklabelAccountNotificationT.TabIndex = 37
	$linklabelAccountNotificationT.TabStop = $True
	$linklabelAccountNotificationT.Text = 'Account Notification Template'
	$linklabelAccountNotificationT.add_LinkClicked($linklabelAccountNotificationT_LinkClicked)
	#
	# buttonChooseQualtraxGroups
	#
	$buttonChooseQualtraxGroups.Location = '448, 432'
	$buttonChooseQualtraxGroups.Name = 'buttonChooseQualtraxGroups'
	$buttonChooseQualtraxGroups.Size = '212, 105'
	$buttonChooseQualtraxGroups.TabIndex = 36
	$buttonChooseQualtraxGroups.Text = 'Choose Qualtrax Groups'
	$buttonChooseQualtraxGroups.UseVisualStyleBackColor = $True
	$buttonChooseQualtraxGroups.add_Click($buttonChooseQualtraxGroups_Click)
	#
	# buttonChooseActiveDirector
	#
	$buttonChooseActiveDirector.Location = '230, 432'
	$buttonChooseActiveDirector.Name = 'buttonChooseActiveDirector'
	$buttonChooseActiveDirector.Size = '212, 105'
	$buttonChooseActiveDirector.TabIndex = 12
	$buttonChooseActiveDirector.Text = 'Choose Active Directory Groups'
	$buttonChooseActiveDirector.UseVisualStyleBackColor = $True
	$buttonChooseActiveDirector.add_Click($buttonGroupPicker_Click)
	#
	# comboboxQualtrax
	#
	$comboboxQualtrax.FormattingEnabled = $True
	[void]$comboboxQualtrax.Items.Add('Yes')
	[void]$comboboxQualtrax.Items.Add('No')
	$comboboxQualtrax.Location = '841, 138'
	$comboboxQualtrax.Name = 'comboboxQualtrax'
	$comboboxQualtrax.Size = '209, 21'
	$comboboxQualtrax.TabIndex = 9
	#
	# labelQualtraxRequired
	#
	$labelQualtraxRequired.Font = 'Microsoft Sans Serif, 15pt'
	$labelQualtraxRequired.Location = '841, 112'
	$labelQualtraxRequired.Name = 'labelQualtraxRequired'
	$labelQualtraxRequired.Size = '219, 23'
	$labelQualtraxRequired.TabIndex = 35
	$labelQualtraxRequired.Text = 'Qualtrax Required?'
	#
	# comboboxJDE
	#
	$comboboxJDE.FormattingEnabled = $True
	[void]$comboboxJDE.Items.Add('Yes')
	[void]$comboboxJDE.Items.Add('No')
	$comboboxJDE.Location = '841, 219'
	$comboboxJDE.Name = 'comboboxJDE'
	$comboboxJDE.Size = '209, 21'
	$comboboxJDE.TabIndex = 10
	$comboboxJDE.add_SelectedIndexChanged($comboboxJDE_SelectedIndexChanged)
	#
	# labelJDEdwardsRequired
	#
	$labelJDEdwardsRequired.Font = 'Microsoft Sans Serif, 15pt'
	$labelJDEdwardsRequired.Location = '841, 193'
	$labelJDEdwardsRequired.Name = 'labelJDEdwardsRequired'
	$labelJDEdwardsRequired.Size = '219, 23'
	$labelJDEdwardsRequired.TabIndex = 33
	$labelJDEdwardsRequired.Text = 'JD Edwards Required?'
	#
	# labelTypeOfEmployee
	#
	$labelTypeOfEmployee.Font = 'Microsoft Sans Serif, 15pt'
	$labelTypeOfEmployee.Location = '841, 43'
	$labelTypeOfEmployee.Name = 'labelTypeOfEmployee'
	$labelTypeOfEmployee.Size = '171, 23'
	$labelTypeOfEmployee.TabIndex = 32
	$labelTypeOfEmployee.Text = 'Type of Employee'
	$labelTypeOfEmployee.add_Click($labelTypeOfEmployee_Click)
	#
	# comboboxEmployeeType
	#
	$comboboxEmployeeType.FormattingEnabled = $True
	[void]$comboboxEmployeeType.Items.Add('Pogo Employee')
	[void]$comboboxEmployeeType.Items.Add('Sumitomo Employee')
	[void]$comboboxEmployeeType.Items.Add('Temporary Employee')
	[void]$comboboxEmployeeType.Items.Add('Contractor')
	$comboboxEmployeeType.Location = '841, 69'
	$comboboxEmployeeType.Name = 'comboboxEmployeeType'
	$comboboxEmployeeType.Size = '209, 21'
	$comboboxEmployeeType.TabIndex = 8
	#
	# statusbar
	#
	$statusbar.Location = '0, 536'
	$statusbar.Name = 'statusbar'
	$statusbar.Size = '1089, 22'
	$statusbar.TabIndex = 30
	#
	# labelIncrement
	#
	$labelIncrement.Font = 'Microsoft Sans Serif, 15pt'
	$labelIncrement.Location = '12, 144'
	$labelIncrement.Name = 'labelIncrement'
	$labelIncrement.Size = '113, 26'
	$labelIncrement.TabIndex = 29
	$labelIncrement.Text = 'Increment?'
	#
	# textboxIncrement
	#
	$textboxIncrement.Location = '131, 150'
	$textboxIncrement.Name = 'textboxIncrement'
	$textboxIncrement.Size = '52, 20'
	$textboxIncrement.TabIndex = 3
	#
	# buttonExitProgram
	#
	$buttonExitProgram.DialogResult = 'Cancel'
	$buttonExitProgram.Location = '865, 432'
	$buttonExitProgram.Name = 'buttonExitProgram'
	$buttonExitProgram.Size = '212, 105'
	$buttonExitProgram.TabIndex = 13
	$buttonExitProgram.Text = 'Exit Program'
	$buttonExitProgram.UseVisualStyleBackColor = $True
	$buttonExitProgram.add_Click($buttonExitProgram_Click)
	#
	# testboxSV
	#
	$testboxSV.Location = '12, 298'
	$testboxSV.Name = 'testboxSV'
	$testboxSV.Size = '171, 20'
	$testboxSV.TabIndex = 6
	#
	# labelSupervisor
	#
	$labelSupervisor.Font = 'Microsoft Sans Serif, 15pt'
	$labelSupervisor.Location = '12, 272'
	$labelSupervisor.Name = 'labelSupervisor'
	$labelSupervisor.Size = '171, 23'
	$labelSupervisor.TabIndex = 21
	$labelSupervisor.Text = 'Supervisor'
	#
	# picturebox1
	#
	#region Binary Data
	$picturebox1.Image = [System.Convert]::FromBase64String('
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
AElFTkSuQmCC')
	#endregion
	$picturebox1.Location = '218, 42'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '574, 325'
	$picturebox1.TabIndex = 20
	$picturebox1.TabStop = $False
	#
	# comboboxdept
	#
	$comboboxdept.FormattingEnabled = $True
	[void]$comboboxdept.Items.Add("$DeptList")
	$comboboxdept.Location = '12, 248'
	$comboboxdept.Name = 'comboboxdept'
	$comboboxdept.Size = '171, 21'
	$comboboxdept.TabIndex = 5
	#
	# textboxJT
	#
	$textboxJT.Location = '12, 199'
	$textboxJT.Name = 'textboxJT'
	$textboxJT.Size = '171, 20'
	$textboxJT.TabIndex = 4
	#
	# labelJobTitle
	#
	$labelJobTitle.Font = 'Microsoft Sans Serif, 15pt'
	$labelJobTitle.Location = '12, 173'
	$labelJobTitle.Name = 'labelJobTitle'
	$labelJobTitle.Size = '171, 23'
	$labelJobTitle.TabIndex = 16
	$labelJobTitle.Text = 'Job Title'
	#
	# buttonCreateAccounts
	#
	$buttonCreateAccounts.Location = '12, 432'
	$buttonCreateAccounts.Name = 'buttonCreateAccounts'
	$buttonCreateAccounts.Size = '212, 105'
	$buttonCreateAccounts.TabIndex = 11
	$buttonCreateAccounts.Text = 'Create Accounts'
	$buttonCreateAccounts.UseVisualStyleBackColor = $True
	$buttonCreateAccounts.add_Click($buttonCreateAccounts_Click)
	#
	# labelPassword
	#
	$labelPassword.Font = 'Microsoft Sans Serif, 15pt'
	$labelPassword.Location = '12, 321'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '171, 23'
	$labelPassword.TabIndex = 14
	$labelPassword.Text = 'Password'
	#
	# textboxPW
	#
	$textboxPW.Location = '12, 347'
	$textboxPW.Name = 'textboxPW'
	$textboxPW.Size = '171, 20'
	$textboxPW.TabIndex = 7
	$textboxPW.Text = 'Worksafe2017'
	$textboxPW.UseSystemPasswordChar = $True
	#
	# labelDepartment
	#
	$labelDepartment.Font = 'Microsoft Sans Serif, 15pt'
	$labelDepartment.Location = '12, 222'
	$labelDepartment.Name = 'labelDepartment'
	$labelDepartment.Size = '171, 23'
	$labelDepartment.TabIndex = 8
	$labelDepartment.Text = 'Department'
	#
	# textboxLN
	#
	$textboxLN.Location = '12, 118'
	$textboxLN.Name = 'textboxLN'
	$textboxLN.Size = '171, 20'
	$textboxLN.TabIndex = 2
	#
	# labelLastName
	#
	$labelLastName.Font = 'Microsoft Sans Serif, 15pt'
	$labelLastName.Location = '12, 92'
	$labelLastName.Name = 'labelLastName'
	$labelLastName.Size = '171, 23'
	$labelLastName.TabIndex = 3
	$labelLastName.Text = 'Last Name'
	#
	# labelFirstName
	#
	$labelFirstName.Font = 'Microsoft Sans Serif, 15pt'
	$labelFirstName.Location = '12, 43'
	$labelFirstName.Name = 'labelFirstName'
	$labelFirstName.Size = '171, 23'
	$labelFirstName.TabIndex = 2
	$labelFirstName.Text = 'First Name'
	#
	# textboxFN
	#
	$textboxFN.Location = '12, 69'
	$textboxFN.Name = 'textboxFN'
	$textboxFN.Size = '171, 20'
	$textboxFN.TabIndex = 1
	#
	# Title
	#
	$Title.BorderStyle = 'FixedSingle'
	$Title.Font = 'Microsoft Sans Serif, 20pt, style=Bold'
	$Title.Location = '0, 0'
	$Title.Name = 'Title'
	$Title.Size = '979, 39'
	$Title.TabIndex = 0
	$Title.Text = 'Pogo New User Creation'
	$Title.TextAlign = 'MiddleCenter'
	#
	# buttonButton1
	#
	$buttonButton1.Location = '853, 270'
	$buttonButton1.Name = 'buttonButton1'
	$buttonButton1.Size = '184, 51'
	$buttonButton1.TabIndex = 37
	$buttonButton1.Text = 'button1'
	$buttonButton1.UseVisualStyleBackColor = $True
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: ChildForm.psf
function Show-ChildForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ChAAAB+LCAAAAAAABADVl21v2jAQx99P2newommvEBAeSrtBJJq2U1X6oELbvauc5CheHRvZTgv7
9LtgoA+UxlRtpQkJCPHd/3+Xn0+mfQ6xvAM13aOGEvyimRQdr1b2veDrF0Lap4rdMEH5AeNwQlMI
whHjyYFUaXmsh+3Kyn0bFf2B2BAzHUPH60+1gbR8xUQi73U5j7XvJfLSrRK5nNtolKv5q0TCjJtM
QUdAZhTlJXKWRZzFRzAdyFsQnajVos24ueXv1BtQ3d7xiEArHW+I+bqxYXewxxQakmr6S8ls7JE4
r0JhqBdKYZTk2taL3s+UHIMy03mObmZkP6YcU6Qgcl+4dKtE/Hq7slhaFHosE/CCA1QqjAk5A2H6
7C8G+PWmXyJNv1EYlXfeC9aVWxjeN1SZM6mZwfK8IEQHoM4o9qfY8AAmxgusLFnqkpmwXo3ev8Ok
89CepMl619f57XZlFrCILuaqRyPgHw4Wz1XCkZQabKED2U3yXfEaWau9y4nwgmMWK6nl0JA+FZr0
QbEh8tUcrzZ/NUVPxtQ+tQaysuMQYVlZW4FDBktnq9YskXrVYf2ARocigYkX1Fc3zTqirLc5R8RI
QpOEICvk2y8uI8p/2I+Lk1XGKhYTd2jCEcS3kPSYNrty8uH0xFaOo1wkJ7MKjyGNMP2IvTqbXhgX
eapTgVMjvvWCgcrAocGh5FkqrlhiRl5Qq7o8wrwF1BgmbvYFjTgkzmJPAW3UHEKOsa/MmnSWsVS/
2llnsv3aTgvRbrnspge2X6zs8bg7RKZmz6vA5/Vy4bPptzHXu5kxUnw4z9FM5vRoM3S7Ih7hwAx2
JUbjWeCc3YxcJt4eo1zenINGt15werQRg76/XUcKnR6tRWpRnPtcxLFYc5pzS3R856n4nabjn05m
LjRcMp1R3jdTDrs0vsUdlfd73YZ6jOp8nixqv55d/1c0hlTEwD+HyJBmGvQl5SyZY3ZAuXaZWk9Z
tp4347m21XgLz85Sb2ba6WDwwLSzoc24fkLp04uu1jhy8bitF2vnv0yDVMdScRa9A5XtyjLrcxW7
Dz5D4933WrFi/n/yc4QUvcdjyVu0qvVhc9ga+n7SrNI6Ldb6nfJPqSmUCt5faHlpkW9XHv/3D/4B
U9qXqQoQAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formActiveDirectoryGroup = New-Object 'System.Windows.Forms.Form'
	$labelChooseGroupsToAddFor = New-Object 'System.Windows.Forms.Label'
	$checkedlistboxGroupMembership = New-Object 'System.Windows.Forms.CheckedListBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formActiveDirectoryGroup_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	Update-ListBox $checkedlistboxGroupMembership (Get-ADGroup -Filter ("Name -like '*Usr.*'") | Where-Object Name -NotLike '*.Shdw*' | Select-Object Name | Sort-Object Name) "Name"
	$GroupMembership = New-Object System.Collections.ArrayList
	$un = $Global:GlobalUN
	$buttonOK_Click={
		#TODO: Place custom script here
		ForEach ($GroupMembership in $GroupMembership) {Add-ADGroupMember -Identity $GroupMembership -Members $un}
	}
	
	$checkedlistboxGroupMembership_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ItemCheckEventArgs]
		#TODO: Place custom script here
		$GroupMembership.Add($checkedlistboxGroupMembership.Text) > $null
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formActiveDirectoryGroup.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildForm_checkedlistboxGroupMembership = $checkedlistboxGroupMembership.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$checkedlistboxGroupMembership.remove_ItemCheck($checkedlistboxGroupMembership_ItemCheck)
			$buttonOK.remove_Click($buttonOK_Click)
			$formActiveDirectoryGroup.remove_Load($formActiveDirectoryGroup_Load)
			$formActiveDirectoryGroup.remove_Load($Form_StateCorrection_Load)
			$formActiveDirectoryGroup.remove_Closing($Form_StoreValues_Closing)
			$formActiveDirectoryGroup.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formActiveDirectoryGroup.SuspendLayout()
	#
	# formActiveDirectoryGroup
	#
	$formActiveDirectoryGroup.Controls.Add($labelChooseGroupsToAddFor)
	$formActiveDirectoryGroup.Controls.Add($checkedlistboxGroupMembership)
	$formActiveDirectoryGroup.Controls.Add($buttonOK)
	$formActiveDirectoryGroup.Controls.Add($buttonCancel)
	$formActiveDirectoryGroup.AutoScaleDimensions = '6, 13'
	$formActiveDirectoryGroup.AutoScaleMode = 'Font'
	$formActiveDirectoryGroup.ClientSize = '1351, 514'
	$formActiveDirectoryGroup.Name = 'formActiveDirectoryGroup'
	$formActiveDirectoryGroup.StartPosition = 'CenterParent'
	$formActiveDirectoryGroup.Text = 'Active Directory Groups'
	$formActiveDirectoryGroup.add_Load($formActiveDirectoryGroup_Load)
	#
	# labelChooseGroupsToAddFor
	#
	$labelChooseGroupsToAddFor.Font = 'Microsoft Sans Serif, 15pt'
	$labelChooseGroupsToAddFor.Location = '41, 9'
	$labelChooseGroupsToAddFor.Name = 'labelChooseGroupsToAddFor'
	$labelChooseGroupsToAddFor.Size = '725, 30'
	$labelChooseGroupsToAddFor.TabIndex = 33
	$labelChooseGroupsToAddFor.Text = "Choose Groups to add for $Global:GlobalUN"
	#
	# checkedlistboxGroupMembership
	#
	$checkedlistboxGroupMembership.CheckOnClick = $True
	$checkedlistboxGroupMembership.ColumnWidth = 200
	$checkedlistboxGroupMembership.FormattingEnabled = $True
	$checkedlistboxGroupMembership.Location = '41, 42'
	$checkedlistboxGroupMembership.MultiColumn = $True
	$checkedlistboxGroupMembership.Name = 'checkedlistboxGroupMembership'
	$checkedlistboxGroupMembership.Size = '1297, 379'
	$checkedlistboxGroupMembership.TabIndex = 2
	$checkedlistboxGroupMembership.add_ItemCheck($checkedlistboxGroupMembership_ItemCheck)
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '1183, 479'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 1
	$buttonOK.Text = '&OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.CausesValidation = $False
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '1264, 479'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 0
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseVisualStyleBackColor = $True
	$formActiveDirectoryGroup.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formActiveDirectoryGroup.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formActiveDirectoryGroup.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formActiveDirectoryGroup.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formActiveDirectoryGroup.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formActiveDirectoryGroup.ShowDialog()

}
#endregion Source: ChildForm.psf

#region Source: ChildFormQ.psf
function Show-ChildFormQ_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
CxAAAB+LCAAAAAAABADVl9tu4jAQhu9X2newotVeISAcSrsLkWh6UFV62ELbvaucZCjeOjaynbbs
0+8EAz1QGlO1lVZIQMD//DOTzyOnfQaxvAU12aGGEvyimRQdr1b2veDrF0LaJ4pdM0H5HuNwTFMI
whHjyZ5U6a/yWA/blaUFVhb9gdgQMxlDx+tPtIG0fMlEIu90ORfb9xJ56a8SuZjl0ShX81eJhBk3
mYKOgMwoykvkNIs4iw9hMpA3IDpRq0WbcXPD36o3oLq55RGBqXS8Icbrxobdwg5TmJBUk30ls7FH
4rwMhVIvlMIoybUtGHM/VXIMykxmMbqZkf2YcgyRgsjzwqUbJeLX25X50iLpkUzAC/bQqVATcgbC
9NlfFPj1pl8iTb9RqMo77wWryi2U9w1V5lRqZrA8LwgxA1CnFPtTnPAA7o0XWFuy8CVTY72s3r3F
oDNpT9JkddZX+d/tylQwVxdz1aMR8A8Hi+cu4UhKDbbQgewm+bZ4jazl3uVEeMERi5XUcmhInwpN
+qDYEPlqjpebvxyiJ2Nq71oDWdlyUFhWVlbgEMHS2ao1S6RedVg/oNGBSODeC+rLm2YVUTa3GUfE
SEKThCAr5Ns+lxHlP+zH+fEyYxWLiTs04QjiG0h6TJttef/h9MTWjqNdJO+nFR5BGmH4EXt1Nr0w
LvJQJwKnRnzjBQOVgUODQ8mzVFyyxIy8oFZ1uYV5C6gxTFzvChpxSJzNngLaqDlIjrCvzCbpbGOp
frWzzmT7ta0Wot1y2U0PbL9Y2eNxd4BMTe9XQZ5Xi4XPpt/aXG9nxkjx4TxHU5uTw/XQ7Yp4hAMz
2JaoxrPAGbseuUy8HUa5vD4Djdl6wcnhWgz6/mYdKXS6tRapeXHucxHHYs1pzi3Q8Z2n4neajn86
JXOu4YLpjPK+mXDYpvEN7qi836s21GNUZ/NkXvvV9Pq/ojGkIgb+OUSGNNOgLyhnyQyzPcq1y9R6
yrLNeT2eaxuNt/DsbPVmpp0OBg9MOye0HtdPKH160dUaRy4et/V87eyXSZDqWCrOonegsl1ZRH3u
YvfBZ3i8+14rdswfKD/HSNE7PJa8xataHzaHraHvJ80qrdNir98p/5SaQqng/Y0Wlxb5duXxw3/w
D3Q1knQLEAAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formActiveDirectoryGroup = New-Object 'System.Windows.Forms.Form'
	$labelChooseGroupsToAddFor = New-Object 'System.Windows.Forms.Label'
	$checkedlistboxGroupMembership = New-Object 'System.Windows.Forms.CheckedListBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formActiveDirectoryGroup_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	##Pull Group Data
	$ConnectionString = 'server=pgosqlp03;database=Qualtrax;trusted_connection=true;'
	
	## SQL Query
	$SqlConnection = New-Object System.Data.SqlClient.SqlConnection
	$SqlConnection.ConnectionString = $ConnectionString
	
	$SqlCmd = New-Object System.Data.SqlClient.SqlCommand
	$sqlcmd.CommandText = 'SELECT TOP 1000 Id,Name FROM Qualtrax.dbo.UG_UserGroup WHERE IsGroup = 1 AND Enabled = 1 ORDER BY NAME'
	$sqlcmd.Connection = $SqlConnection
	$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
	$SqlAdapter.SelectCommand = $SqlCmd
	$DataSet = New-Object System.Data.DataSet
	$SqlAdapter.Fill($DataSet)
	$SqlConnection.Close()
	
	$GroupHash = @{}
	
	ForEach ($Row in $DataSet.Tables[0].Rows)
	{
		$GroupHash.Add($($Row.Name), ($Row.Id))
	}
	
	
	
	
	
	## Find UserID
	$un = $Global:GlobalUN
	$search = "'" + $un + "'"
	$SqlConnection = New-Object System.Data.SqlClient.SqlConnection
	$SqlConnection.ConnectionString = $ConnectionString
	$SqlCmd = New-Object System.Data.SqlClient.SqlCommand
	$sqlcmd.CommandText = "SELECT TOP 1 Id FROM Qualtrax.dbo.UG_UserGroup WHERE USERID = $search"
	$sqlcmd.Connection = $SqlConnection
	$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
	$SqlAdapter.SelectCommand = $SqlCmd
	$DataSet = New-Object System.Data.DataSet
	$SqlAdapter.Fill($DataSet)
	$SqlConnection.Close()
	
	$UID = foreach ($Row in $dataset.Tables[0].Rows)
	{
		"$($Row.Id)"
	}
	
	Update-ListBox $checkedlistboxGroupMembership ($GroupHash.Keys | Out-String -Stream)
	$GroupMembership = New-Object System.Collections.ArrayList
	
	$buttonOK_Click={
		#TODO: Place custom script here
		## Create Members Array
		$members = @($UID)
		$JSON = Convertto-JSON @{
			'Members' = $members
		}
		$Header = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
		$Header.add('Accept', 'application/json')
		$Header.add('User-Agent', 'PogoNewUser')
		$Header.add('Content-Type', 'application/json')
		$Header.add('Authorization', 'Bearer 3f7d71b0-bb8b-4bf7-a7ce-0712268a0432')
		ForEach ($GroupMembership in $GroupMembership)
		{
			$add = $GroupMembership
			$GID = $GroupHash[$add]
			Try { Invoke-WebRequest -uri "http://qualtrax.smmpogo.loc/api/groups/$GID/members" -Method POST -Headers $Header -Body $JSON }
			Catch
			{
				[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
				[Windows.Forms.MessageBox]::Show('Qualtrax Group Membership Failed.  Please add manually', 'Error', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
			}
		}
	}
	
	$checkedlistboxGroupMembership_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ItemCheckEventArgs]
		#TODO: Place custom script here
		$GroupMembership.Add($checkedlistboxGroupMembership.Text) > $null
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formActiveDirectoryGroup.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildFormQ_checkedlistboxGroupMembership = $checkedlistboxGroupMembership.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$checkedlistboxGroupMembership.remove_ItemCheck($checkedlistboxGroupMembership_ItemCheck)
			$buttonOK.remove_Click($buttonOK_Click)
			$formActiveDirectoryGroup.remove_Load($formActiveDirectoryGroup_Load)
			$formActiveDirectoryGroup.remove_Load($Form_StateCorrection_Load)
			$formActiveDirectoryGroup.remove_Closing($Form_StoreValues_Closing)
			$formActiveDirectoryGroup.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formActiveDirectoryGroup.SuspendLayout()
	#
	# formActiveDirectoryGroup
	#
	$formActiveDirectoryGroup.Controls.Add($labelChooseGroupsToAddFor)
	$formActiveDirectoryGroup.Controls.Add($checkedlistboxGroupMembership)
	$formActiveDirectoryGroup.Controls.Add($buttonOK)
	$formActiveDirectoryGroup.Controls.Add($buttonCancel)
	$formActiveDirectoryGroup.AutoScaleDimensions = '6, 13'
	$formActiveDirectoryGroup.AutoScaleMode = 'Font'
	$formActiveDirectoryGroup.ClientSize = '1351, 514'
	$formActiveDirectoryGroup.Name = 'formActiveDirectoryGroup'
	$formActiveDirectoryGroup.StartPosition = 'CenterParent'
	$formActiveDirectoryGroup.Text = 'Active Directory Groups'
	$formActiveDirectoryGroup.add_Load($formActiveDirectoryGroup_Load)
	#
	# labelChooseGroupsToAddFor
	#
	$labelChooseGroupsToAddFor.Font = 'Microsoft Sans Serif, 15pt'
	$labelChooseGroupsToAddFor.Location = '41, 9'
	$labelChooseGroupsToAddFor.Name = 'labelChooseGroupsToAddFor'
	$labelChooseGroupsToAddFor.Size = '725, 30'
	$labelChooseGroupsToAddFor.TabIndex = 33
	$labelChooseGroupsToAddFor.Text = "Choose Groups to add for $Global:GlobalUN"
	#
	# checkedlistboxGroupMembership
	#
	$checkedlistboxGroupMembership.CheckOnClick = $True
	$checkedlistboxGroupMembership.ColumnWidth = 200
	$checkedlistboxGroupMembership.FormattingEnabled = $True
	$checkedlistboxGroupMembership.Location = '41, 42'
	$checkedlistboxGroupMembership.MultiColumn = $True
	$checkedlistboxGroupMembership.Name = 'checkedlistboxGroupMembership'
	$checkedlistboxGroupMembership.Size = '1297, 379'
	$checkedlistboxGroupMembership.TabIndex = 2
	$checkedlistboxGroupMembership.add_ItemCheck($checkedlistboxGroupMembership_ItemCheck)
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '1183, 479'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 1
	$buttonOK.Text = '&OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.CausesValidation = $False
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '1264, 479'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 0
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseVisualStyleBackColor = $True
	$formActiveDirectoryGroup.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formActiveDirectoryGroup.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formActiveDirectoryGroup.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formActiveDirectoryGroup.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formActiveDirectoryGroup.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formActiveDirectoryGroup.ShowDialog()

}
#endregion Source: ChildFormQ.psf

#Start the application
Main ($CommandLine)
