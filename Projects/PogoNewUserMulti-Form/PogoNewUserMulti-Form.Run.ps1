#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 13871e5c-2b4a-4099-a790-2b75968584fd
# Source File: C:\Users\ehendricks\Documents\SAPIEN\PowerShell Studio\Projects\PogoNewUserMulti-Form\PogoNewUserMulti-Form.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.140
     Generated on:       6/4/2017 4:53 PM
     Generated by:       EHendricks
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2017
#>



#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$linklabelApplicationDocumenta = New-Object 'System.Windows.Forms.LinkLabel'
	$linklabelAccountNotificationT = New-Object 'System.Windows.Forms.LinkLabel'
	$buttonChooseQualtraxGroups = New-Object 'System.Windows.Forms.Button'
	$buttonChooseActiveDirector = New-Object 'System.Windows.Forms.Button'
	$comboboxQualtrax = New-Object 'System.Windows.Forms.ComboBox'
	$labelQualtraxRequired = New-Object 'System.Windows.Forms.Label'
	$comboboxJDE = New-Object 'System.Windows.Forms.ComboBox'
	$labelJDEdwardsRequired = New-Object 'System.Windows.Forms.Label'
	$labelTypeOfEmployee = New-Object 'System.Windows.Forms.Label'
	$comboboxEmployeeType = New-Object 'System.Windows.Forms.ComboBox'
	$statusbar = New-Object 'System.Windows.Forms.StatusBar'
	$labelIncrement = New-Object 'System.Windows.Forms.Label'
	$textboxIncrement = New-Object 'System.Windows.Forms.TextBox'
	$buttonExitProgram = New-Object 'System.Windows.Forms.Button'
	$testboxSV = New-Object 'System.Windows.Forms.TextBox'
	$labelSupervisor = New-Object 'System.Windows.Forms.Label'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$comboboxdept = New-Object 'System.Windows.Forms.ComboBox'
	$textboxJT = New-Object 'System.Windows.Forms.TextBox'
	$labelJobTitle = New-Object 'System.Windows.Forms.Label'
	$buttonCreateAccounts = New-Object 'System.Windows.Forms.Button'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$textboxPW = New-Object 'System.Windows.Forms.TextBox'
	$labelDepartment = New-Object 'System.Windows.Forms.Label'
	$textboxLN = New-Object 'System.Windows.Forms.TextBox'
	$labelLastName = New-Object 'System.Windows.Forms.Label'
	$labelFirstName = New-Object 'System.Windows.Forms.Label'
	$textboxFN = New-Object 'System.Windows.Forms.TextBox'
	$Title = New-Object 'System.Windows.Forms.Label'
	$buttonButton1 = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$MainForm_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	
	
	
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Get-CheckedNodes 
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNodes $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param(
		[ValidateNotNull()]
		[System.Windows.Forms.TreeNodeCollection] $NodeCollection,
		[ValidateNotNull()]
		[System.Collections.ArrayList]$CheckedNodes)
		
		foreach($Node in $NodeCollection)
		{
			if($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNodes $Node.Nodes $CheckedNodes
		}
	}
	
	
	function Load-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	
	Load-ComboBox $comboboxdept (Get-ADOrganizationalUnit -Filter * -SearchBase 'OU=Dept,OU=Mine,OU=Pogo,DC=smmpogo,DC=loc' -SearchScope OneLevel | Where-Object Name -notlike *WS* | Select-Object Name) "Name"
	
	function Sort-ListViewColumn 
	{
		<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
	
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
	
		.PARAMETER ListView
			The ListView control to sort.
	
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
			
		.PARAMETER  SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
	#>
		param(	
				[ValidateNotNull()]
				[Parameter(Mandatory=$true)]
				[System.Windows.Forms.ListView]$ListView,
				[Parameter(Mandatory=$true)]
				[int]$ColumnIndex,
				[System.Windows.Forms.SortOrder]$SortOrder = 'None')
		
		if(($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
			try{
			$local:type = [ListViewItemComparer]
		}
		catch{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@  | Out-Null
		}
		#endregion
		
		if($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort()#Sort the items
		}
		else
		{
			if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending	
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder) 
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($lvGroup -eq $null)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($SubItems -ne $null)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($lvGroup -ne $null)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($lvGroup -ne $null)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	
	function Load-ListBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$listBox.Items.Clear()	
		}
		
		if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)	
		}
	
		$listBox.DisplayMember = $DisplayMember
	}
	
	
	#endregion
	
	$buttonCreateAccounts_Click = {
		#Get Connected to MSOL
		Import-Module MSOnline
		#	$LiveCred = Get-Credential
		$LiveCred = $Host.ui.PromptForCredential('Microsoft Office365', 'Please enter your username and password.', '', 'NetBiosUserName')
		New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.outlook.com/powershell/ -Credential $LiveCred -Authentication Basic –AllowRedirection
		Connect-MSOLService –credential $LiveCred -ErrorVariable CredCheck
		If ($CredCheck)
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Username or password is incorrect.  Please try again', 'Error', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
			Return
		}
		
		## Pull information
		$fn = $textboxFN.Text
		$ln = $textboxLN.Text
		$inc = $textboxIncrement.Text
		$un = ($fn.substring(0, 1) + $ln) + $inc
		$upn = $un + '@smmpogo.com'
		$dept = $comboboxdept.Text
		$supervisor = $testboxSV.Text
		$securestringpw = $textboxPW.Text | ConvertTo-SecureString -AsPlainText -Force
		$path = "OU=Usr,OU=$dept,OU=Dept,OU=Mine,OU=Pogo,DC=smmpogo,DC=loc"
		
		
		##Check username
		$untest = Get-ADUser $un
		if (!$untest)
		{
		}
		Else
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Username in use.  Please increment and try again', 'Username Test', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
			Return
		}
		
		##Check Supervisor
		$svtest = Get-ADUser $supervisor
		if (!$svtest)
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Supervisor username not valid.  Please try again.', 'Supervisor Test', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
			Return
		}
		Else
		{
		}
		
		
		##Set Standard Property Set
		$User = @{
			Name = $fn + ' ' + $ln
			GivenName = $fn
			Surname = $ln
			samAccountName = $un
			userPrincipalName = $upn
			EMailAddress = "$un@smmpogo.com"
			HomeDrive = 'H:\'
			DisplayName = $fn + ' ' + $ln
			AccountPassword = $securestringpw
			ChangePasswordAtLogon = $true
			Enabled = $true
			Description = "POGO $dept"
			Title = $textboxJT.Text
			Department = $dept
			Manager = $supervisor
			Company = 'SMMPOGO'
			StreetAddress = 'PO 145'
			City = 'Delta Junction'
			State = 'AK'
			PostalCode = '98387'
			Path = $path
			
			
			
		}
		
		## Create Properties Object Dependent on Employee, Temp, or Contractor
		## Temp
		If ($comboboxEmployeeType.Text -eq 'Temporary Employee')
		{
		$User.EmailAddress = ''
		$User.Description = "POGO Temp $dept"
		}
		## Sumitomo
		If ($comboboxEmployeeType.Text -eq 'Sumitomo Employee')
		{
			$User.Description = "Sumitomo $dept"
		}
		## Contractor
		If ($comboboxEmployeeType.Text -eq 'Contractor')
		{
			$User.HomeDrive = ''
			$User.EmailAddress = ''
			$User.Description = "CONTRACTOR $dept"
		}
		
		
		
		
		New-ADUser @User
		
		## Create and permission Home Drive
		$homedir = "\\pgofilp02\homedrives$"
		if (-not (Test-Path "$homeDir\$un"))
		{
		$acl = Get-Acl (New-Item -Path $homedir -Name $un -ItemType Directory)
		
		# Make sure access rules inherited from parent folders.
		$acl.SetAccessRuleProtection($false, $true)
		
		$ace = "smmpogo\$un", "Modify", "ContainerInherit,ObjectInherit", "None", "Allow"
		$objACE = New-Object System.Security.AccessControl.FileSystemAccessRule($ace)
		$acl.AddAccessRule($objACE)
		Set-ACL -Path "$homeDir\$un" -AclObject $acl
		}
		
		## Add Default Groups
		Add-ADGroupMember -Identity 'All Users POGO' -Members $un
		
		## Write Properties
		$Properties = (Get-AdUser -Properties * -Identity $un)
		
		##Set MSOL Proxy Properties
		Add-PSSnapin quest.activeroles.admanagement
		set-qaduser $un -objectAttributes @{ 'proxyAddresses' = "SMTP:$fn.$ln@smmpogo.com" }
		
		##Set JDE Properties
		
		If ($comboboxJDE.Text -eq 'Yes')
		{
			set-qaduser $un -objectAttributes @{ 'ESIJDESSOJdeUserName' = $un }
			set-qaduser $un -objectAttributes @{ 'ESIJDESSOJdeEnvironment' = 'JPD900' }
			set-qaduser $un -objectAttributes @{ 'ESIJDESSOJdeUserRole' = '*ALL' }
		}
		## Qualtrax User Creation
		If ($comboboxQualtrax.Text -eq 'Yes')
		{
			$hash = @{
				'loginName' = "smmpogo\$un"
				'emailAddress' = "$upn"
				'licenseType' = 'concurrent'
				'name' = "$fn $ln"
				'firstName' = "$fn"
				'lastName' = "$ln"
				'languagePreference' = 'en-us'
			}
			
			$JSON = $hash | convertto-json
			
			$Header = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
			$Header.add('Accept', 'application/json')
			$Header.add('User-Agent', 'PogoNewUser')
			$Header.add('Content-Type', 'application/json')
			$Header.add('Authorization', 'Bearer 3f7d71b0-bb8b-4bf7-a7ce-0712268a0432')
			Try
			{
				Invoke-WebRequest -uri 'http://pgoappp13.smmpogo.loc/api/users' -Method POST -Headers $Header -Body $JSON
			}
			
			Catch
			{
				[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
				[Windows.Forms.MessageBox]::Show('Qualtrax username in use.  Please investigate and create Qualtrax account manually', 'Error', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
					}
		}
		
		## Dirsync with O365
		## Start DirSync
		Invoke-Command -ComputerName "pgoadsp01" -ScriptBlock {C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -psconsolefile "C:\Program Files\Windows Azure Active Directory Sync\DirSyncConfigShell.psc1" -command "Start-OnlineCoexistenceSync"}
		#Connect-MSOLService
		while (!$MSOLUserTest)
		{
			$statusbar.Text = 'Syncing MSOL'
			$MSOLUserTest = Get-MsolUser -UserPrincipalName $upn}
		Get-MSOLUser -UserPrincipalName $upn | Set-MSOLUser -UsageLocation US
		Set-MsolUserLicense -UserPrincipalName $upn -AddLicenses "SMMPOGO1COM:StandardPack"
		
		
		
		## Send Completion Message
		Send-MailMessage -From PogoUserCreation@smmpogo.com -Subject "User Successfully Created" -To Helpdesk@smmpogo.com -Body "$Properties" -BodyAsHtml -SmtpServer smtp.smmpogo.loc
		$statusbar.Text = "$upn created successfully"
		$hash = @{
			'text' = "User $upn has been created"
			'username' = 'Cuthulu, Lord of Slack Messages'
		}
		
		$JSON = $hash | convertto-json
		
		$Header = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
		$Header.add('content-type', 'application/json')
		Try
		{
			Invoke-WebRequest -uri 'https://hooks.slack.com/services/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' -Method POST -Headers $Header -Body $JSON
		}
		
		Catch
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Faaaailleed', 'Test', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
		}
		
		## Prep globals for child form
		$Global:GlobalUN = ""
		function foo()
		{
		$Global:GlobalUN = "$un"
		}
		foo
	}
	
	$buttonExitProgram_Click={
		$MainForm.Close()
	}
	$comboboxJDE_SelectedIndexChanged={
		#TODO: Place custom script here
		
	}
	
	$labelTypeOfEmployee_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonChooseGroups_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonGroupPicker_Click={
		#TODO: Place custom script here
		If ((Show-ChildForm_psf) -eq 'OK')
		{
		}
	}
	
	$buttonChooseQualtraxGroups_Click={
		#TODO: Place custom script here
		If ((Show-ChildFormQ_psf) -eq 'OK')
		{
		}
	}
	
	$linklabelAccountNotificationT_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
		#TODO: Place custom script here
		G:\IT\Private\NewUserTemplate.msg
	}
	
	$linklabelApplicationDocumenta_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
		#TODO: Place custom script here
		(New-Object -Com Shell.Application).Open("http://confluence.smmpogo.loc:8090/x/HoCe")
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_comboboxQualtrax = $comboboxQualtrax.Text
		$script:MainForm_comboboxQualtrax_SelectedItem = $comboboxQualtrax.SelectedItem
		$script:MainForm_comboboxJDE = $comboboxJDE.Text
		$script:MainForm_comboboxJDE_SelectedItem = $comboboxJDE.SelectedItem
		$script:MainForm_comboboxEmployeeType = $comboboxEmployeeType.Text
		$script:MainForm_comboboxEmployeeType_SelectedItem = $comboboxEmployeeType.SelectedItem
		$script:MainForm_textboxIncrement = $textboxIncrement.Text
		$script:MainForm_testboxSV = $testboxSV.Text
		$script:MainForm_comboboxdept = $comboboxdept.Text
		$script:MainForm_comboboxdept_SelectedItem = $comboboxdept.SelectedItem
		$script:MainForm_textboxJT = $textboxJT.Text
		$script:MainForm_textboxPW = $textboxPW.Text
		$script:MainForm_textboxLN = $textboxLN.Text
		$script:MainForm_textboxFN = $textboxFN.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabelApplicationDocumenta.remove_LinkClicked($linklabelApplicationDocumenta_LinkClicked)
			$linklabelAccountNotificationT.remove_LinkClicked($linklabelAccountNotificationT_LinkClicked)
			$buttonChooseQualtraxGroups.remove_Click($buttonChooseQualtraxGroups_Click)
			$buttonChooseActiveDirector.remove_Click($buttonGroupPicker_Click)
			$comboboxJDE.remove_SelectedIndexChanged($comboboxJDE_SelectedIndexChanged)
			$labelTypeOfEmployee.remove_Click($labelTypeOfEmployee_Click)
			$buttonExitProgram.remove_Click($buttonExitProgram_Click)
			$buttonCreateAccounts.remove_Click($buttonCreateAccounts_Click)
			$MainForm.remove_Load($MainForm_Load)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($linklabelApplicationDocumenta)
	$MainForm.Controls.Add($linklabelAccountNotificationT)
	$MainForm.Controls.Add($buttonChooseQualtraxGroups)
	$MainForm.Controls.Add($buttonChooseActiveDirector)
	$MainForm.Controls.Add($comboboxQualtrax)
	$MainForm.Controls.Add($labelQualtraxRequired)
	$MainForm.Controls.Add($comboboxJDE)
	$MainForm.Controls.Add($labelJDEdwardsRequired)
	$MainForm.Controls.Add($labelTypeOfEmployee)
	$MainForm.Controls.Add($comboboxEmployeeType)
	$MainForm.Controls.Add($statusbar)
	$MainForm.Controls.Add($labelIncrement)
	$MainForm.Controls.Add($textboxIncrement)
	$MainForm.Controls.Add($buttonExitProgram)
	$MainForm.Controls.Add($testboxSV)
	$MainForm.Controls.Add($labelSupervisor)
	$MainForm.Controls.Add($picturebox1)
	$MainForm.Controls.Add($comboboxdept)
	$MainForm.Controls.Add($textboxJT)
	$MainForm.Controls.Add($labelJobTitle)
	$MainForm.Controls.Add($buttonCreateAccounts)
	$MainForm.Controls.Add($labelPassword)
	$MainForm.Controls.Add($textboxPW)
	$MainForm.Controls.Add($labelDepartment)
	$MainForm.Controls.Add($textboxLN)
	$MainForm.Controls.Add($labelLastName)
	$MainForm.Controls.Add($labelFirstName)
	$MainForm.Controls.Add($textboxFN)
	$MainForm.Controls.Add($Title)
	$MainForm.AcceptButton = $buttonCreateAccounts
	$MainForm.AutoScaleDimensions = '6, 13'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.CancelButton = $buttonExitProgram
	$MainForm.ClientSize = '1089, 558'
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'Pogo New User Creation'
	$MainForm.add_Load($MainForm_Load)
	#
	# linklabelApplicationDocumenta
	#
	$linklabelApplicationDocumenta.Location = '666, 510'
	$linklabelApplicationDocumenta.Name = 'linklabelApplicationDocumenta'
	$linklabelApplicationDocumenta.Size = '160, 23'
	$linklabelApplicationDocumenta.TabIndex = 38
	$linklabelApplicationDocumenta.TabStop = $True
	$linklabelApplicationDocumenta.Text = 'Application Documentation'
	$linklabelApplicationDocumenta.add_LinkClicked($linklabelApplicationDocumenta_LinkClicked)
	#
	# linklabelAccountNotificationT
	#
	$linklabelAccountNotificationT.Location = '666, 478'
	$linklabelAccountNotificationT.Name = 'linklabelAccountNotificationT'
	$linklabelAccountNotificationT.Size = '160, 23'
	$linklabelAccountNotificationT.TabIndex = 37
	$linklabelAccountNotificationT.TabStop = $True
	$linklabelAccountNotificationT.Text = 'Account Notification Template'
	$linklabelAccountNotificationT.add_LinkClicked($linklabelAccountNotificationT_LinkClicked)
	#
	# buttonChooseQualtraxGroups
	#
	$buttonChooseQualtraxGroups.Location = '448, 432'
	$buttonChooseQualtraxGroups.Name = 'buttonChooseQualtraxGroups'
	$buttonChooseQualtraxGroups.Size = '212, 105'
	$buttonChooseQualtraxGroups.TabIndex = 36
	$buttonChooseQualtraxGroups.Text = 'Choose Qualtrax Groups'
	$buttonChooseQualtraxGroups.UseVisualStyleBackColor = $True
	$buttonChooseQualtraxGroups.add_Click($buttonChooseQualtraxGroups_Click)
	#
	# buttonChooseActiveDirector
	#
	$buttonChooseActiveDirector.Location = '230, 432'
	$buttonChooseActiveDirector.Name = 'buttonChooseActiveDirector'
	$buttonChooseActiveDirector.Size = '212, 105'
	$buttonChooseActiveDirector.TabIndex = 12
	$buttonChooseActiveDirector.Text = 'Choose Active Directory Groups'
	$buttonChooseActiveDirector.UseVisualStyleBackColor = $True
	$buttonChooseActiveDirector.add_Click($buttonGroupPicker_Click)
	#
	# comboboxQualtrax
	#
	$comboboxQualtrax.FormattingEnabled = $True
	[void]$comboboxQualtrax.Items.Add('Yes')
	[void]$comboboxQualtrax.Items.Add('No')
	$comboboxQualtrax.Location = '841, 138'
	$comboboxQualtrax.Name = 'comboboxQualtrax'
	$comboboxQualtrax.Size = '209, 21'
	$comboboxQualtrax.TabIndex = 9
	#
	# labelQualtraxRequired
	#
	$labelQualtraxRequired.Font = 'Microsoft Sans Serif, 15pt'
	$labelQualtraxRequired.Location = '841, 112'
	$labelQualtraxRequired.Name = 'labelQualtraxRequired'
	$labelQualtraxRequired.Size = '219, 23'
	$labelQualtraxRequired.TabIndex = 35
	$labelQualtraxRequired.Text = 'Qualtrax Required?'
	#
	# comboboxJDE
	#
	$comboboxJDE.FormattingEnabled = $True
	[void]$comboboxJDE.Items.Add('Yes')
	[void]$comboboxJDE.Items.Add('No')
	$comboboxJDE.Location = '841, 219'
	$comboboxJDE.Name = 'comboboxJDE'
	$comboboxJDE.Size = '209, 21'
	$comboboxJDE.TabIndex = 10
	$comboboxJDE.add_SelectedIndexChanged($comboboxJDE_SelectedIndexChanged)
	#
	# labelJDEdwardsRequired
	#
	$labelJDEdwardsRequired.Font = 'Microsoft Sans Serif, 15pt'
	$labelJDEdwardsRequired.Location = '841, 193'
	$labelJDEdwardsRequired.Name = 'labelJDEdwardsRequired'
	$labelJDEdwardsRequired.Size = '219, 23'
	$labelJDEdwardsRequired.TabIndex = 33
	$labelJDEdwardsRequired.Text = 'JD Edwards Required?'
	#
	# labelTypeOfEmployee
	#
	$labelTypeOfEmployee.Font = 'Microsoft Sans Serif, 15pt'
	$labelTypeOfEmployee.Location = '841, 43'
	$labelTypeOfEmployee.Name = 'labelTypeOfEmployee'
	$labelTypeOfEmployee.Size = '171, 23'
	$labelTypeOfEmployee.TabIndex = 32
	$labelTypeOfEmployee.Text = 'Type of Employee'
	$labelTypeOfEmployee.add_Click($labelTypeOfEmployee_Click)
	#
	# comboboxEmployeeType
	#
	$comboboxEmployeeType.FormattingEnabled = $True
	[void]$comboboxEmployeeType.Items.Add('Pogo Employee')
	[void]$comboboxEmployeeType.Items.Add('Sumitomo Employee')
	[void]$comboboxEmployeeType.Items.Add('Temporary Employee')
	[void]$comboboxEmployeeType.Items.Add('Contractor')
	$comboboxEmployeeType.Location = '841, 69'
	$comboboxEmployeeType.Name = 'comboboxEmployeeType'
	$comboboxEmployeeType.Size = '209, 21'
	$comboboxEmployeeType.TabIndex = 8
	#
	# statusbar
	#
	$statusbar.Location = '0, 536'
	$statusbar.Name = 'statusbar'
	$statusbar.Size = '1089, 22'
	$statusbar.TabIndex = 30
	#
	# labelIncrement
	#
	$labelIncrement.Font = 'Microsoft Sans Serif, 15pt'
	$labelIncrement.Location = '12, 144'
	$labelIncrement.Name = 'labelIncrement'
	$labelIncrement.Size = '113, 26'
	$labelIncrement.TabIndex = 29
	$labelIncrement.Text = 'Increment?'
	#
	# textboxIncrement
	#
	$textboxIncrement.Location = '131, 150'
	$textboxIncrement.Name = 'textboxIncrement'
	$textboxIncrement.Size = '52, 20'
	$textboxIncrement.TabIndex = 3
	#
	# buttonExitProgram
	#
	$buttonExitProgram.DialogResult = 'Cancel'
	$buttonExitProgram.Location = '865, 432'
	$buttonExitProgram.Name = 'buttonExitProgram'
	$buttonExitProgram.Size = '212, 105'
	$buttonExitProgram.TabIndex = 13
	$buttonExitProgram.Text = 'Exit Program'
	$buttonExitProgram.UseVisualStyleBackColor = $True
	$buttonExitProgram.add_Click($buttonExitProgram_Click)
	#
	# testboxSV
	#
	$testboxSV.Location = '12, 298'
	$testboxSV.Name = 'testboxSV'
	$testboxSV.Size = '171, 20'
	$testboxSV.TabIndex = 6
	#
	# labelSupervisor
	#
	$labelSupervisor.Font = 'Microsoft Sans Serif, 15pt'
	$labelSupervisor.Location = '12, 272'
	$labelSupervisor.Name = 'labelSupervisor'
	$labelSupervisor.Size = '171, 23'
	$labelSupervisor.TabIndex = 21
	$labelSupervisor.Text = 'Supervisor'
	#
	# picturebox1
	#
	#region Binary Data
	$picturebox1.Image = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAAgkAAAEfCAYAAADLBVXjAAAABGdBTUEAALGPC/xhBQAAAAlwSFlz
AAAOvAAADrwBlbxySQAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAHalSURB
VHhe7Z0HeBzF+cZD772G3iEBAgnNEHoLECAQSgglBEL5B0hCryEQSigJ1QXjiqtsS7bcjbvlbstq
VpctyUUuaqfey/ffd25HmlvN3e1eke503+953kfS3e7s3ml35t2Zb775CTEM06/IKGmgjk7zD4Zh
mCBgk8Aw/YgxaytoyPIyWrelwXyFYRgmcNgkMEw/oKapgyYkV9JowySMXVdBw1eVU0Kai1rbuUuB
YZjAYZPAMBGIk7a9or6NBi0vox8MgzBufaUQjAL+/m5FOa0qrDO3ZBiGcQabBIaJIOZk19CWylbz
L/8UVbTQ9yvKhCmQBkGV6FVYXU6TNlSaezAMw9iHTQLD9DGtHZ20YWuD8dRfRrMzq81XiWqb2s3f
9OTubqKhK8u9GgQpDEF8saTU3IthGMY+bBIYpo+ZmlZFw1a5G3s06KPWuDV0ZZmIMxhvNPQrNtfR
ckMrC+tpTlY1DTPMwYjVvg2Ce7ihjGZsrKY2c7pDu/ET760u4sBGhmH8wyaBYfoABBRWNLSJ3wvK
mkWDj8Ybjb6qMaakcYDQ+Mv3VVOgCttMN8yBq8GzNwKmA2UMXl5GlfXu4zMMw3iDTQLDhJAd1f7j
CTYZpmBQUqnoEQBltW1iNoKusQ9U368sF2WroEditGEQ8D6MwvJNHNDIMIxv2CQwTAhoausUQwaD
k8rMVzzp7CDKL22ikUbjDEOAnoO07e4u/5WFdaLRtjb0wWjUmnJaW+wuv6KhnRIzqjyOgeNn72wU
7zMMw3iDTQLDBElnZydNSXWJeAIkM0IjvHFHIyUZT+oJaVU0Ptn9ZI+GGUMHGCZAwGGLYSwqG9ps
BR86FcobaRgFmAWYEnV6JIRzySttNj8BwzCMHjYJDBMgaOQX5tWK4EAZJ4AGGEZgpNEIy/gBaQzk
+zATC3JrRBmYwhjqoQYpeUx5XOt7OK+iCrdRaG7v7NouLsUlDM5W49wYholt2CQwTIBgfB9P694a
Ym9C4zxpg8sshUQvg267cAvngVkS83NqxFCJNDToDYHBcfdAuHtFCsu514FhYhE2CQwTAGnbG2lE
ED0AWF8BINAxXD0JdgRzo/aCWN+DaUCvCM43dRtPm2SYWINNAsM4oLC8RcQYYEzfSe+BVWiYfzSe
4CducImGWLdNJAmfd3F+rfktMAwTK7BJYBib7DSe+pFfAN3xwRgEKdm9r3svkoTzRGAmwzCxB5sE
hrHJ5BSXaDB1DWl/FoYbcnY1md8CwzCxBJsEhrHBui0NInYgFD0I0Sb0nExOraIaP2tJMAzT/2CT
wDA2wDTHWDQIkAhgNIwCEkGNXedeS8JcCoJhmH4OmwSG8cOqwnqRlEjXgMaKYBQgDD1UNXKPAsPE
CmwSGMYHFfVtIo9BrPYiqJLfQUVdG1XWexqF0to2sXT1LuMnMlAyDNM/YJPA9BvQNuXsbKSm1g7z
leDYXtUqkg2xQegWvgtMhxy6oozWb6knfNXlhmkYuKyUvl5aKowCaGvvpOLKFjErYnpGNSVvbaAd
xveJ1xmGiR7YJDD9CmQKRPwA0gq3BTFwvqSgjr5fGbtxCL6E7wRCICdWsswzjAFel6wtrhf/A5gJ
zAaBMEyB7ZFjor6ZjQLDRAtsEph+hQwwRLpkrJGAZZnxpGuXgtJmGiWC9LgHwY6kAUCa6S2VzTRu
nXvKpDQScjv5N7aHkVu+uY5219j/vzAM0zewSWD6DUXlzTTcaKBkoyRTCuMJNj7VRUsL6mjDtgZq
busUQxMSGAmYA5gKPP1iP7WBY/mW/K7tfnd4H0YBQxQMw0Q2bBKYfsOMjVU9kh2hQYLwuliQyWjI
IDRoEF7DT7zG5qB3he9amrgJyZW0u5Z7Fhgm0mCTwPQLtrpabc1CkKZBJ932rPBKfvcwa4hXYBgm
smCTwEQ9GDrAUAF6AnQNESvyJY0CAiGxLDWHNjJMZMAmgYlKMP2uqKKZcnc3iyWbkRFQ1/iwokfC
KBj/RwxBIAA1b1cTlda20uK8WpprmAcktUI8CcMwvQebBCbqwMzG9g73dEfEE/BQQf+SHILA/xeG
AT+lecDvyL0wN6uGKus5hoFhwg2bBCZqyShpFCZB19Cwol/SLFhfQ6+R2yBW0DZXq3k1MAwTDtgk
MFHNUM6IGLNCDAqCVVcV1plXQ0+Q4TG/tInmZNWIHoj4tCqx5DeGM1K2NXAKaYbxA5sEJqpBut9h
q7g3IVYFg4hhCPxeUt1KhRXN1NDaKdJDI8ETeh3EVFfjJ34XMvYR+61B7EM51bWEJo03w/RH2CQw
Uc/0jdUiMt7agLBiQ2IIwjQLMm4BQm4MvOetp0nuhzwNoVrvg2H6G2wSmH4Bxqe9NQas2JA0BFK6
bXSCmZi4wUWNrbwENsNYYZPA9AsKyprEyoS6RoDF8if3mhLlYmEw4iwNDNMFmwSm37DcqOB5tgMr
UKH3AcMVY9ZVUkcQK4gyTH+CTQLTr5iU4uqxfgOLZVcwCrh+Rq6poJKqFvOqYpjYhU0C06+obWqn
Ict52IEVnBDQiGmSxRVuo1DTyPEKTGzCJoHpdyzIrRHR7brKn8WyK/QqDEzi5ayZ2IZNAtPvaO/o
pCHGU6CTCHcWSyf0JjBMLMMmgemX7KzG0tE87MAKTpgxwzCxDJsEpt+SkF7FQYysoIS03zwlkoll
2CQw/RaxjDRPiWQFIZgErP/AMLEKmwSm34KqfTDPdGAFISwghRgXholV2CQw/Zp52TVicR9dA8Bi
+dMwwyS4Gnj6IxO7sElg+jVYDZCHHFiBCiuMVtSzSWBiFzYJTL+mrK6Nl5JmBSysELmjutW8mhgm
9mCTwPR7EHymawBYLH8SJoHTMzMxDJsEpl9T29Qhgs90DQCL5U8wCUVmamaGiUXYJDD9mpLqVlHR
6xoAFsufEM9SUN5sXk0ME3uwSWD6NZUN7SJCXdcAsFj+BJOQt5tNAhO7sElg+j0ck8AKVDAJubua
zCuJYWIPNglMv6ahhWMSWIELJiFrZ6N5NTFM7MEmgenXZJQ0cp4EVsAaaVw76SUN5tXEMLEHmwSm
X1PV0E4Dk0p5oSdWQIJJyNjBPQlM7MImgen3ZO9soukZ1WLZX07RzHIiNglMrMMmgYkZyuvbaH5O
DX1nmIUx69gssPxr1JoKWrul3ryCGCb2YJPAxByu+nYaaVT+yJ+ARgBDEehhGG38PpbNA0sRro9V
hXXmlcMwsQebBCZmydvdRCuNBiAhrYoW5NbQsoJaEeTIRoElBZOwfDObBCZ2YZPAMAq7a1tF7AIb
BRbEJoGJddgkMDFJ5o5GGr66nLZW9szLv6m0WQSs6RoNVmwJw1DzcmrMK4NhYg82CUxE0tlJtMVo
wJM21VFiRhXN2FjtoZmZ1TQ+uVI88eP3NcX11NjSYe7tn8FJZTRyTTnNNvaVtBm7L8ytoUX5tTxl
kiWE6wDXF8PEKmwSmD6nsbWDdla3CmMgQYwA0inLwEKdMEMBwu948se22TZT6CIOYZRhEhDAKJmX
XSOCGVGersFgxZ5wLczK5J4EJnZhk8D0Oq6GNlq/tUFkQ5yWXiUqYjTOKdu6M9vtMEwDTIKT2ACU
A9kB6Zoxm2FCcqX4GyaFYxFYVuF6mp1lmATFwDJMLMEmgQk72TsbRSMs2WX8PmR5mXj6RyWMhhmC
UchRegLQw4Bt7DbcWKOh0MGyvjVN7ZRuGBWAYQdOtMSyaoxxTUxOrRLXCMPEImwSmJCyq6aVFufX
Uk1ju/gbgYGDDUOAqYXLN9WJp7JxpimwVsh4DdtNTa+i3N1NtNXVYjzpu2yZBPQKIFbBKQ3N7jiG
5K0NHKzI6iEMZ03Y4BLXCMPEImwSmJDyzbJS0dDjqRxd+ahk0chDaMhlz4GuQobwHrZBGXZzFmAb
bBsIbe3ufuR2wyugJwLni/PE7xAnWIptsUlgYh02CUxIWVdcbzTY7oZVGgRd5RtKYZhim6t7OMMJ
roZ22l3bJn5H0CPiIBbl1VJLW6cwDj/muIMZ2SjEpnANT0xhk8DELmwSmJCDAEQ0rLpKN9RC4/3D
OnfwYSCkbm+gNUW+c/Nn7Wx09zJwzELMCdcXZs0wTKzCJoEJC5OMpy8MG+gq3lAKlfgww5B0dAQW
fo7hhEFJZTTZON/krfXCEBSW9Qx+rGxoF58JT5a682D1XyHIlmFiFTYJTFiob+4QAYu90U2PJ71l
m+qourFdNOZOwFRIGAwxk8KMRcBUyE0ao7BxRyMHN8agsGoow8QqbBKYsIHpiHjKD/fTN4wIAiVx
HAQw5pc2eSRmsguMjewBwXlby9iwrUEYEt05sPqv2CQwsQybBCaslFS3ioYV2Q11FXCoBKMgBaMw
3ngNQuChHZAzAZRUtYp4ChiFhDQXFVW0iKmYmTuaRBpoHm6IPaFniWFiFTYJTNhpbe+kBbm1oiu/
N4YfcAw05hCOiYa/qtH7ug7TM6rFthI0CihHTsWEacAwAxuE2BRmvHRyykUmRmGTwPQamPWACtdu
/oNQCMdBY494g1WF9eJv9A5IsIYDDADMREGpOw4B3cu6slixKVyz7QEGxjJMtMMmgQkbqFZRtzZj
eUUTVLYyH0FvGgUIMxkw9BGf6p73PierpivtM4xLc1snpW3n4ESWp2Ag2SQwsQqbBCZsNLd2UJ2Z
9tgK1mjorVwKqmAI0LMglpo2/5aamFzZZRp0+7JiUzAJ3q5jhunvsElgwgamFmbucC+gBBAciCf5
2iZ3hSsb5d5eWEkaBdUMSKPABoFlFWa6VNQ5m1rLMP0FNglMWFlSUEsTN1TS7Cz3Kovo1p+fWyve
K3G10pL8WlqYV8td/KyIFUwCFi5jmFiETQITVrAGAoYVYBDkkzoCA605CKanV4mne10lzWL1pXD9
7qjqDnZlmFiCTQITdtZtaRA9CGqlu9WyINN6YxtOVMSKROF63VLJPQlMbMImgekV1ERE6DGYl10j
Vl/cXdMqDILsabBW0CxWXwsGt6C8Z5puhokF2CQwvcLsrBqP4QQZn4BpiTyjgBXJwnWab+bQYJhY
g00CE3aWb6oTZsBqBGSMgvoaixVpgknI3dVkXs0ME1uwSWDCStZOJE7qndUgWaxwCCYhe2f3VF6G
iSXYJDBhJaOksU+SJrFYoRKGw9JLGswrmmFiCzYJTFjBTEfMWuDFkVjRKpiEDCUpGMPEEmwSmLCD
lLZDlvOQAys6xSaBiWXYJDC9AlZeRA587lFgRZtgErCCKcPEImwSmF5jq6tZDD1gpoOuMmb1H03e
2ETjk6u070WbcM2uKqwzr2KGiS3YJDC9SkVdGyVmVIt8+Dz80D+VkNVMz70/iCauL+8XRgEmYQWb
BCZGYZPA9Amp2xqEUUCvApIsoSIetabc4ycPTUSf0IPw7sBJ9JOf/ITue/IlSshp024XTcK1uHwz
mwQmNmGTwPQZCGjE6pCJGVW0fmu9WONhdWG98bvxs6ie4ja4hJFAJS17HfBzjGEq2EBEpmYVE511
5lnCJPzmdw/RtLxO7XbRJBjZxfnulUsZJtZgk8D0OdYVISXtHZ0i013SplrR2wChwk5Iq6LJKS5b
RgGmQh3WwD4wHeo2rNBoQmotjV6UJwwCdM1Nt1FiPmm3jSbhupuZWW1elQwTW7BJYKKC0ro20asg
o8yrmzpo2MqeSZpET4MhVOyISh9vvDbS7InA32PXVVLq9kaRRc+6Lys4JRYQ3Xb3g10mYcCvrxWv
6baNJuFampVZI647hok12CQwUUPu7iYxDAEaWjrouxXdwY/4icpcNv6zjCe/pE3uceSsnY00KKmM
Vmyup9Z2d7fFOMMs8JBF6IQAxenZjV0GAbrg/Ato+mY2CQwTzbBJYKKKlYV1lL3TvdjOtqoWkfIZ
QxDIwTA9o4oKK1qo2TQCKjAVKsXGdpwuOnSaktVC//j3Nx4m4ewzzqAZhWwSGCaaYZPARB0rlUjz
b5aW0vycGjG10ilDV5RpG4WYV3IVjd9QrX/Pi+ZsJTri0IM9TMJhBx8oAhl120eT2CQwsQybBCZq
wQqT09KrzL+c8x2bhJ6CQVhXRmOWFdKMgk6amtdJUzKbaUJKjX57Q3HpDfTlxMUeBkFqXgmbBIaJ
ZtgkMFFL8tYGKqt13oMgwRCFrlGIZU3LJ7rssgGigd/vgIPo/seepr9/PJzGJBXRzE1ECbkdNHlj
o4dpwJDCZQOu6mEQoJkFHcY2rq5to1FsEphYhk0C069BLELa9gbqUMIUqhvbaVKKS1T+ukYhloVk
SK/8Z2iPxn7fvfekY447gR76ywv05tdxNG7FFppRQMJUTE1z9dheampqJY3fEN1ZF9kkMLEMmwSm
X9PU1kmDk8pocqqL8nY3UVpJo5gGOZoNgldNNxr/59/5r7bRl9rHMA2nn3UuPfXSv+jqW+7WbgPF
byijiWn1YhgjWnsU2CQwsQybBKbf0i4mNHRSbXMHjTGMAWYzIFcCT330LyRB+mh4orbhd6JvJi6g
iWt3UXxaNSVmN9HsYrP3Ia+TEnLaxawIxDy4hzBqtefS14JJ4GRKTKzCJoGJCXJ2NXECJYdC/MHX
k5O0jb9d7b3nHnTA/vvRwYccQocedgQddNhRdMtv76W7HniMHn32Ffrr25/RPz4cTK98PYVGLMim
uLQ67bn0pdDrNC+HexKY2IRNAhMTtLR10tCVvPKkU8UbT/tDZm7QGoBw6JORs9zDE5pz6SshjfcK
XuCJiVHYJDAxQ2J6FQcrBiAMCfywdDPtt89e2oY9VDrupyfSqMUFNN7HdMu+EK8CycQybBKYmGFO
dg2bhAA1KaORpqRU0sknnaRt4IPR9bf9jr5KWE2JOa1ikSjd8ftSbBKYWIZNAhMzIH0zDzcErolp
dTQ9t5UuHfBrbWPvREcfdRT93+sf0chlWygxr4Pi0jEDIjJnP7BJYGIZNglMTNDY0kFDV3KGxWAV
n91On4+eo2347ejk08+m9wdNoinptZSQ0+Ezk2OkiE0CE8uwSWBigo07eHnooGU86SPr4hGHHao1
AN506MEH0U13PkCDZqZQYm4bTc5sFqtGao8RgWKTwMQybBKYmGCbi1d9DFbIb/DY/72iNQK+9ODT
r4o1HDBcEY0JldgkMLEMmwQmZsBaDRyTEJiQ6GjSul1aE+BPV99wKyUWRO9CT2wSmFiGTQITE3R2
Eg1jkxCwZm8h+tn5v9CaAH/CEtLRvGQ0mwQmlmGTwMQEszOreb2GADU5s4X+/V281gBIPfDE3+io
o47WvgfFp5TT+A3V2vIjXWwSmFiGTQLTq1TUt1Hqtkaaml4llnoOlFWFddTarizt6IOMHY2iF0HX
ALD8KLlKLPd88AH7aRv/s875GQ1MXCt6Cn5YVqjdBvpy4iKKS2/QHyPCxSaBiWXYJDC9xizjaR4L
LEFIajRsVTklpjtfOCdrZyN9u6xUBCP6or2jk5ZvqhMBizzMEJimbya655FnejT6e+/5E3rlo0GU
mNve1fjHZ7fR52Pn99gWuvfx58WCTtbyo0FsEphYhk0C0yugux9TEK2N9cg15ZSQVmVu5Z8FubXC
XOAnehJ21bRSaW2b+W43WAFy4oZK7TFZ9oTZCCMW5PRo8G+4/R6asK5U5DmwJkBCgOLzb33SY58r
rvw1Td8UnXEJbBKYWIZNAhN2fsyuEb0H3hprNOTzfayyhyGK9JJGmpzi6ioHPRETkivFjAX8PsV4
b1VRPa0trqc1hlAuxyAEpxlGo37WWed0NfSnn34mfTFpGU03jICvJEgzC4luuuNeD5MAzd3CJoFh
og02CUxYmZtV4/dpHu8hG6Krod3cq5uC0maxPzRGafSxjywTP/EeKnOpMT6Ox/IvEWS4bHNXA//C
u/+jadktYg0H3faqkChptmEUzjjzTA+TMGF5UVRkWLSKTQITy7BJYMJGg0iFbK+7XzbqWypaaEd1
K60srKcZG6u4we9DxaXV0eufDqNhS4rc8QQOsiRioSb0/Oy31x5dJuGtr8bR5I1N2u0jWWwSmFiG
TQITNjCEgEWVdBWvTjADo9aUi0BDVMwYRrBjMFjhE3oOAn36n2QYgqFz0rpMwo133EfT8jq120ay
2CQwsQybBCZsDF1R5riRZ1PQv5SQ20kfDp0iTMLPzjk3KoMXYRKS2CQwMQqbBCYsFFfwWgkstzBU
8d6gSYYmR2WuBJiEFWwSmBiFTQITMrAc8/aqFkrd3ihmFnCvAEsK5iCakykheRfDxCJsEpiQUFLV
apiCSpHZ0Nd0RxYr2sQmgYll2CQwQVHf0mFmUnRPQ9RVsixWNItNAhPLsElgAmZLZYswB6hEueeA
1V/FJoGJZdgkMAGRs6tJVJ6cw4DV38UmgYll2CQwjsECS98FML2RxYpGsUlgYhk2CYxjZuc20sT0
RpqS1UrxOW00Nbej14VpdfHZrSKDX1x6vTuN8HrPxYZ6Q0hBPBHZBTf27fehCqsxTslqockyEZJl
EaZo1kTj80xKb/Cr8RvsZ4f0JzYJTCzTZRIKCgpo1apVtHbt2ojTmjVraOPGjbR582YqKSmhlhbf
SwSHiqKiIpo/fz59/fXX9Morr9Cdd95J99xzT5/o7rvvpscee4z++c9/0oQJEyg9PZ2qquyvnhgq
Gprb6YvENHrzmzj665v/oceff53u+eOTdO8jT/Wa7nn4L/TIs6/Q0y+/T69/PpI+GreUxq7YSom5
rZRgNJIwDeE0DDAGyCaIFQ+npFTSwFnpffp9qMKxn/z7O/T8O5/TWwOn0PCFeZSQUSfOFY1nNBsG
GISvElPo3RHz6P1RC7zqn8Pm0NjVu0K2TkQkmQTUg6gPdfWk1PLly6mhocHcwx66+n/16tWUkZFh
bmEPHBfHV8uxasWKFY7Pr6/Yvn07rVy5ssdnWLZsmbmFPex8L5EmfO7du3d3m4Tbb7+9K31qpOvw
ww+ns846i5599llKTk42P0Fo2LBhAz366KN0zDHHaI8dSdpvv/3ooosuou+++y7sN11CQgJdddVV
dNjhR2jPpa91yEEH0hHHHEePPP0ifT5xKU3PbTOe7pu1lX4wQm9BQkY9vTtoMl129c3GtRiZ34fU
vnvvQUcceTTdcteD9PHouZSYY2+RpkgUUjpff+td2s9p1RlnnEEzkd3RwXoT3hQpJiEvL0/7WXVa
t26duZc9vNX/p5xyirmFPXBcXTlW7bnnnuKBL9J59dVXtecPOcHu9xJp+uijj7pNwkMPPaTdKBp0
5plniifrYIBD/8UvfqEtPxq0xx570BtvvGF+mtDxzYgJdMjBB2uPGck66ZTT6P0hU8SyxuNTMBSh
bwDsCt3XM4yy3vpiDB10UPR9H1InnHgy/Xf8IvG9RFuvAkzCbfc+rP1cOt3829+LZat1ZTlRpJgE
3Wf0ptTUVHMve3ir/y+++GJzC3vguLpyvGnx4sXmnpHJ+++/rz1vyAlOv5dIEXrR+4VJkEpMTDQ/
jTM++eQTbXnRqBNOOIHq6+vNTxYcN950s/YY0aTLr7qO4tNraWJqnbYBsCPEO8zI76QB19ykPUY0
6p6Hn6JZm6PLKDg1CdDb/x1OU/ODMwqRYBLOPfdc7efzpmgxCdDAgQPNvSMPNgn9zCRAu3btMj+R
PXx1J+m0995706GHHkqHHHJIr+mwww7Tnosvtba2mp8wMM455xxtuTodcuABdPTRRxs6Jmw65phj
6aAD9je0Hx243z7a8/CmM844U4zLu4Mb9Q2BVxmNKLqtf/mry7Vl69Qb34dORx15pPh+dOek07W3
3kWzQvCk3VsKxCRAgxLXiRgSXZl21NcmAcOqus/lS9FkEqBnnnnGLCGyiHWT8PHHH/s3Caeddhot
WLCA4uPje1VTp04VY+0ffPCBCNZD0ODpp5+uPUdVF1xwgfmJ/INAEl0Zqk4++WR65513xLZbt26l
iooKMf6Pp/XeUmNjowigQeDmqFGjbMWPYEw2UO6//35tmVJ7Ghpw3a306sdD6MOxi+mH5Vtp4voy
ijOEn+FQXHIFjV5WTKOWFdHIpYX08cSV9N6QeHr5g2/p17fcTccdf4L2XKUuuviSgBrE6cbT9t0P
Pq4tU2ovQ5dcdT299p/e+z6siltfThPW7qbRScX04egF9NL7X9E551+sPV9Vb/13BE3JbtN+9kiT
L5Nw4IEHaV+H9t7jJzR1Y23AgYx9aRIQC6T7TP4UbSYBGjBggFlK5NAbJmH8+PGivdO1g30pBMgj
oNWvSbjkkkvMLSIDnPSvfvUr7blK2Y361+0rddBBB1FSUpK5ZeRRW1tLf/7zn7XnLjVy5Ehza/sg
NkNXltS1N99Jo5YWiTFtTLOblF4vKl+M2YdbE1KqxbGguLR6EYA3JbNFLD88dWM9/S9uKZ338/O1
5w29/dUYR8GMGKIYOjdDW5bUNTfdIYwL4hV6+/voKff3g1kMCLDEOQ1MXE+/vOxK7blLzchpETM2
dN9BJMmXSbj59t/Rbb9/RPsedOGFF9HsosCGV/rKJJSVlWk/i9SQIUO0r0ORaBJmzJihfV3Vscce
Kx6KIoXeMAmRjl+T4PQi6S1uvPFG7flCX331lbmVd+Li4rT7QuhqjxbgQHWfAUIEsVMwg0FXFvT4
C2/RnGISeQF0lWmfypyWONNoGM83GgTd+R93zFE0Ew2Fbn+NEg3zce1Nt2nLgh5/4W3R8ETk92EK
Ky/OLiS66be/134G6MEn/0EJue3a/SNJvkzClVdfT4tLiU4+6UTt+9BvH3icZjn4/0v1lUnYd999
tZ8D+tOf/iS20b0HRaJJADA+qJd076vKzMwU2/c1vWESIskU6YhakwB05wshr4A/fAUCRRt/+9vf
tJ8DwpROJ+jKgK675bc0Zysq2MgOdJuYVkdxa3doPwM0ceVWGm88bev29ZBhOmbmtWrLgGAe5kbB
9wGhl2Ceca4nnXiS9rMcdtD+ATWevS1fJuGKq66hWVuIxi4v1r4v9f6gSSKXhq58b+oLk3Dlld57
f0488USxDfLF6N6HItEkyMaws7OTTjpJfy2qmjx5sti+L2GTEOUmwduNhBwK/tDtB/3rX/8yt4gu
dJ8FQhIou/jqXUlIddlrXCNAaCx+dt7PtJ/jXwMn2coTgG0++H6atgxoSkq56NrX7RuJwuf5erL3
GJxxSwsi/vP4MwlIGIVskx+P8N2tPXpxvuhh0R1Dp942Ce+++672vKVkMjk0Lrr3oUg2CRI7sVX4
LvoSNglRbhJee+017Tnvs88+5hZ6kIBJtx8UrfzhD3/Qfp7zzz/f3MI/3mIcLrn0ckfd9H0tX43J
3U+8QlNz/AfqTc3roFvvfVRbRrR9H1Lo+TjiUH2A32ufjRQprnX7RYrsmARsN6OQ6P4/P6/dDjru
mKNFdk67s11gElYX9Y5JWLRokfacpZAFURLtJgF4q8NVIZC6r2CTEOUm4d///rf2nPfff39zCz1i
7qdmv0DG8CMFRKLqPhNkF8wM0e1/x0NPizUBdBVoJGpqTjvd86R+autv//iMrc+CeITLrtDHZ0Tb
9yGFRvTaG/UxFrfe87BohHX7RYrsmgQMASFW5KJfXqrdFrrksqvcgYw2hotGri6n9JLwpxH21ehD
n376qbmlm/5gEgBmbOm2V4VEd30Bm4QoNwne/oH+TMKLL76o3a+vLsRQkJKSov1MkF2Q5lm3/zvf
TIj4p0xVWPjpwf97W5z7Afvt06U9jL/vvO8RW0F6eBo99+yze3wXULR9H1LoHfntg09qP9NV196o
NLKRKfsmoVIMjU3LaqR99ui5rdRTL/5TmEH1GDrBJGTsCH9FfuSRR2rPE7rhhhvMrbrpLyYB+Ord
lTr44IPFWgK9CZuEGDUJDz74oHa/SP6s/khLS9N+Jsjuug66faHPfphHE9MaomZpaATq/bCyhEYs
KqCRSzZ3acTiAhqdtEVMF9TtpwpBmrrvAvp8zDxHY9qRIgyz/P6Zt7Sf6RcXXiRyQuj2ixQ5MQnQ
pIwmGjrH+30BfT72R5pimEp1P6t6wyTcdZf3NSlg3nX0J5MAMPPhiCP8r4XidF2KYGCT0E9Ngreb
SoLZD7r9otkk+LoIg80bMThuvngqG7mmIqqMAgLxrLJjEKB5232YptFzotckPP2G9jOdcdqpovdE
t1+kyKlJgKbmEf3zS9/d2RNWlxgmGCuHeu4rFW6T8M0332jPS6q8vNzc0pP+ZhIkyM2j21/V999/
b24dXtgkRLlJ+PDDD7XnjDTGvrjwwgu1+/VXk2B3pUzdvtD0aQni/eKKFhphVJjRYhSCUayZhDNP
P61fmgQIizzdetcD2v2gk086iWbkd3hNKBVOk+CrBxBCAiJv9FeTALydjyoMG4cbNglRbhKeeOIJ
7TkjI6Mv8Jl0+/VXk2C3wtDtC02cONHcgmjMuko2CWwS+kSBmgTkvJi1ieiss72vR3LtLXeKRGG6
/cNlEpAvQHcuUs8//7y5pZ7+bBIAAjV15ai6+eabza3DA5uEKDcJ3sav7rvvPnMLPWwS9Oj2heLi
3CZh+eY6UWHqKtL+JjYJkaeATYKhCam1lJBWpd1X6rm3P9eWES6T4GstmvPOO8/cyjv93SSAmTNn
astShZVv29vbzT1CS2+YhEgnak2Cr4sHK1f5gk2CHt2+UJzZk5Czu0kMN1gr0f4oNgmRp2BMAjQ5
s4W+mOA7D8G3U1cZ23mu7xEOk+Bv3RU7xIJJAJs2bdKWp2qPPfYQ6/qEmt4wCfjuH3nkEXr44Ycj
Qsi5g+tTEpUmwV/Ckby8PHNLPWwS9Oj2haRJyN3VxD0Jhtgk9I2CNQkQtnnq5fe0ZUBYMTIhDQtl
da/HEWqTMHbsWO2xpfLz880tfRMrJgG0tbXRcccdpy1XVWJiorlHaOgNkxCpkvg1Cf7G93sDXFxY
KhlBPL/+9a+15ymFRVH8wSZBj25fKG7iBPE+YhHGhDAeISGnvU9kJ9Mem4TIUyhMAoTYg0sHXK0t
BzrvvJ97rBgZSpOA5eZ1x5QaOnSouaV/YskkSK655hpt2ao+++wzc+vgiVWToKYR8GsSkOIYqyJi
/Ky3dcYZZ4jxJsxW0J2bTlgV0R9sEvTo9oXmzptPs/KaafSa0BqE3/3hz/THp/7Rq7r34b/QyEV5
fo0Cm4TIU6hMAv7303Pb6ITjj9eWBf32vkdpppk3IpQmwdcKiP5iqazEokkACOjUla8K3eahIFZN
wt57722euQ2TEE1Sx1F8wSZBj25f6PMf5tJ4H/PIA5GvRjjcGj4vXQSy6c5Lik1C5ClUJgHC/2/U
wlxtWVLvfTuOEnI7Q2YSkNFVdxwIXelOiVWTANDjojuGqssvv9zcOnB6wyQceOCBdMABB0SM0DGA
7J+SfmMS3nrrLfOT+IdNgh7dvtCnYWgU+9IkjPxxI5sEi2LNJEAJOR30wXcJ2vKkhv2YSWNTG4I2
CViNVVe+VCANaCybBLB8ufdVTaXQC11RUWHu4ZzeMAk7d+6kuro6qq6ujggh+Z7L5TLPPMpNwrHH
HkvPPfec44uATYIe3b5QOBpFNgm9LzYJPYXVPO+4/0/aMqH99t6TJmfU08bdreZd4pw5c+Zoy5Za
vHixuaUzYt0kgF27dnldc0aV0+9D0hsmobU18GurN/BrEhAIiAyFmLfbFzr33HPp5z//Od177730
6KOPin/a7NmzxbSYQGGToEe3LxSORnH2Fvfx9ttnr7Bo//327fE5pNgk9PxMsWoSsAokAhl/fr4+
Cyt0wcWX0Y428yZxCJ7MdGVKvfPOO+aWzmGT0A2WxNcdUxVWynVKb5iEcH4vocCvSQjFuE6kcdFF
F2k/K5sE/f7haBSxjsLQeVk0fGFeyDVyaSENik/SfhaITULPzxS7JsF9LU7NqKG9NOVKPf/CP8y7
xBkHHXSQtjwIM7WCgU2CJ7///e+1x1XlZFgasEmwYRKiueH0xqWX6teZ768mITMz09zKN7p9oXDE
JEDqwkuhFFb/G70wR/tZoBEcuNhDsWwSoMkbm+nbqau1ZUtNmjTJvFPsceONN2rLgdTo8UBhk9AT
9Mzojq3q9ttvN7f2D5uEGDUJyCjV3z5rKC5C3b7Ql+PmiqWidZVrJAoGAL0Fus8Cxa3ZzlMgLYp1
kwBNyyd68zPfUfPI12KHTz75RLu/FMbSg4VNgh6sNaM7vipMsbcDmwQ2Cf3ms6anp2s/ExSsSVi4
YIHxpNUY0oWdkJQJeRfCsViUP5MwNQ1z5X0vGT2rmOjIww7R7v/F+AVRahLa6d6/vKr9TJdedgVN
3xTbJgGaZRil626+Q3sMyE4PwMqVK7X7SsXFxZlbBgebBO/k5vqe3grttddetGPHDnMPPWwSYtQk
vPnmm9rPesEFF5hbRB+rVq3SfibILt6SVn3++ae0fBvRD2tD06CPMszBpBQXJW2qozFGmaE2CsIk
zM/UfhZoRl5rVzY9b5qxmei8c/SrBj7+yn8oPtsoQ7NfJEs0svf8UfuZrr35dko0nqR1+0WKesMk
YLnoWcb//qQTT9QeB7riiivMO6YnSB+s20fqySefNLcMHjYJvmloaKCjjjpKey6qfvzxR3OPnrBJ
iFGTMG7cOO1nhaKVL774Qvt54JbtcvXV+lS1f33mKVqwJXiTADMwfFU5TU2vEsvkAvm6ddtgNDGt
jobP8X5TztnqvzFBg3P1Dbdo97/t94+KrmndfpEsGJ/Lr7hS+5nufuT/aGpuu3a/SFFvmAQI18/4
1Tu0x5F64403xPVr5XgfWRzPPPNMc6vQwCbBHgMGDNCej6qvv/7a3NoTNgkxahJ85U8vKioyt4ou
rrxSX/lff/315hb+QeSvrowD9t9PvD/MaOADbdClQVixuU6UBQpKm8Rruu2DUXx2G/3ppQ+0n+WS
Sy+31a2ekNNGDz6rH78/4fjjaI5hmnT7RaySXTRrU6f280AfDZ9OkzIa9ftGiHrLJEBTslvp8zHz
tMeSWrhwoXklu3nggQe020mFGjYJ9kEPju6cVD3zzDPm1t2wSYhRkwB0nxVCPoZoo6WlRftZoP/+
97/mVv5JSvI+bTAleR2t20liqEBXqfoSDAIMxrot9eaRiNK2N9Lw1YGbDl9CT8G555yn/Rx3PPC4
8cTcod1P1cTUOho2e4O2DGhg/EqatLFJu28kKsH4zP947yvtZ4GmprlsLXzVl+pNkwDBTP75b3rj
LFVbWyuu52HDhmnfl8rOzhbbhRI2Cc743//+pz0vVVdddZW5tRs2CTFsEu64w3twUkpKirlVdOAr
J3yFw2yUujKg/fbdR7w/LqXOccMOY6H2IKwqqqdhK8NjEKYaDclnP8zVfgboy4mLKS7d3joUWAlQ
VwZ07NFH0fS8NmEmdPtGktBDEJ/i0n4O6KwzzqSZxZHfM9LbJkEkWtpCdPGvLtceEzrmmGPE0s66
96ScGHUnsElwDrJb6s5NFdYtkOaPTUIMmwRfswEgRChHA3fffbf2/CGs3umUp59+WlsW9Ivzz6PZ
WbUUn21vuWWpoSvKzNKJZmysFkMMoTUILqOxrhVPfl/GLdWeO3Tw/vuIoDRsry/HU+hxuP9x7yvO
XfCLi0QApt3lp3tbyBmB2IkxScV0hI+VVP/51ViaHAW9Ir1vEswVI3Na6GjDFOqO6094GAkXbBIC
o7i4WCxipDtHVSUlJfTNN99o34OcwCYhSkG6ad1nlkIGr23btplbRw7Nzc0ixeihhx6qPW+prKws
cw9n6MqS2mfvvei1T7+n8etKaYZRKWP8f3Jms/G02uBVI9a7exG21xONSq7TbhOIcFx0oyfmtNL3
C/LEUtC6c5Z66uX3KD6nTdsY6IRpkolZDdqypPa1fh9G+f6+j3BKfifT8zpodNIWeu6tT7XnLXXM
UUfSTBGjYc849aX6wiRAE9IaaOZq/1PqrFJX0gsHbBICB7NQ8BClO09VN998s/Z1yAm+vpdIJ6ZN
gq+xfFVnnHEGPfjgg/TZZ5/RrFmzxIItval58+bRyJEj6bXXXhMBivvvv7/2PFU9++yz5qd0zpgx
Y7RlqjrskIPotHMvpL++/hG99slQ+mjkLPpw+HSt3h2aSMsWzaexCfPove/12zjVx8bxXv1oMD3y
7Mt06pnnas9R1bFGYzijoNPv1EerpmS10PuDJ2vLVCW/j2deeZ9e9/N9hEv4Tl4xvpM/Pfc6nXbO
+WJxIt25qvp22pqoyfnQVyYBS0XvaDHui1EjtMf2JtllHS7YJATPrbfeqj1XO3KCr+8Fs8quvfZa
uuaaayJKmOorVi81P0NMmgSQnJys/dzRLFxwwQJDois7WjVyYa7tWASr0Pi8/OG32nKjWR8OnSpi
OHSfORLVlyZBLhV93333aY9vFYx9uGGTEBoCreuc4Ot7iWTdcMMNbBLA5s2bRQCS7vNHm1588UXz
UwXPt99Gf8N4+KGH0nez00SPgK4BsCs0QO9+4z2/RjTp0EMOoc/HLqCpUZbroa9MwgjDJOTuajLv
ChJL1OvOQerVV181twwvbBJCx4gRznqJICdEq0m47bbbuk2Ctzm+0ZyF0CkfffQRHX744drvIdKF
YYhAYxB8UVVVJYZadMeMZGE2xuPPv0kJGzFWH5r5/4i/mLB2N9336DO07z57a48byTpg//3pMeM7
mZFZI2IXwjG7JJyCSbj1bn1K9cuuuKrXTEJTU5P2HKDLLrvM3Cr8+DIJTmdohar+x3F15UCRbBLA
hg3epzzr5ARf30skS8RkmJ+BnnrqKdpvv/1EsI0Uljm97rrrzC1ih6VLl4rkGyeddBIdeOCB2i+v
L7XnnnuKdKPIJIan/d4IrnS5XCJWAbMp0OtiJzq4t7TPXnvQwca1eshhR9Bvf/9HeuubOJqywT0d
Eml2dRV/oJqQUi1mDMStK6UX/zOM7n/0KTr4sCPF8ffZU39+faH99t6LDj7Y+E4OP4oeevJ5emfQ
VJqcWk0/pLfRtqp2yixpFI0fjEK0mAUkuLr3kWfogAMOoMOPPKpLBx50MN34mzvDNnRiNQkAdQS+
Z1lXIqU5fvYmSDusnoMUXsvIyDC3skeo6n8c19s54XwjnZqaGjr66KO7/p/ehM/jBG/fSyQL///7
77+/2yQweuB+MRwBl4k5tkg4NH78eBo8eDANGTIk7Bo4cCAtWrSIlixZIiom9BaEYgW5YKmsrBRL
UK9YsUKc2/Lly2no0KHaz+DWYBr7w2h67r2B9I8PBgWlv7//Db39/Wx6a8h0enfYHBo2P5smrtkp
8hagAcdiVP4WcApWmBqHp3E0TDPyO8Xxv/8xiz4eu4jeHJxIbw+dRS99OER7/qHXQHrpP9+LY+LY
n0xYSiMX5dPEtbvEzIXJ2R0Ub3wnC/PrKX27+2ku3TAJWGALnwWNIBbcsn7GyJOLJhlGZ+rGOkP1
HsLr4ZqhoTMJDBMrsElgepUfUhtpitG4BqvJmO6HaX/pDWJBJ3eegr6bxofj4zwQHCnPDSZCd+7h
EI4lj4tzQI4EGCUkshqfXEkd5loZkrb2Tmps7aC65nYqKm+huBRX1BgFMUPFqjD+79kkMLEMmwSm
1yivaxfpmXUVMSs0QkMPY4CIfDRu8WlV1N7haRB0yH2t5TkRhi2iw2g4E5sEJpZhk8D0GuV1bWwS
wii5rsbKzXVibYxtrhbzm/dNjtEABrvQFgwCVgmN2xAtPRL2xSaBiWXYJDC9ytCVZVEXVR8NQnwB
Ul63d5hftAOaWjvo+5WBmwT8P2Eydla3il4LpOHuT/9jNglMLMMmgelVxq/vf0+afS18n2iU7TIn
q5rm59ZQY6t7GALhCoGYBPQcoPcCBmFVoXuFz2yjMcV6FvKcdPtFm9gkMLEMmwSmV/kxp4ZGG42L
rjJmOZd8il9Z2L3Kpjd21bRSfJpLxCtgn6UF7rTBO6paHQ83wCDMyaqh1UX1NC29SpRT29RBA5Pc
i3ktyqvt8X/GPtFoHNgkMLEMmwSmV1laUNc19Y4VnNDg4kl+YV6N8eReaX7DPalv6aCkTXUiHgQN
tdwfjV9iRhWNN8tSy/YnmAo15gGzJXAOc7NrxN+ZOxrFNjAK7h6HcppuHAt/R5tRYJPAxDJsEphe
o9VoSNBwROPTZKQJ3yGGCLJ3NYvvtra5QwwbgHbjl/VbGmhNcT0tza+lkavdjbTuex/joNHGdhhG
gIYZx66sb3cf0GDmxmoasryM0krceRiWGWZwcopL9ChMSXV19TYsNcxKtJlEmISCcvf3zDCxBpsE
ptdAV7f6JMsKTGjYv19ZRss364cY0koaaLDRYKOXAQ1yKEwZykAvQNwGLHhUQanbu7PnLTca/kFJ
pTQrq1okaQKYXTHP7FUAMk/D+q0NwrDojhGpgknYxCaBiVHYJDC9wmLjiRaVra4SZtkXnuIRGFhc
4bvRGrsu+LwHqhDHkL6jUQwrlNe3mUdxMyuzhhbneS6LjO0wHGHN0LCysF70QsC8oMxQnmO4xCaB
iWXYJDBhp7iyRXSNh+KJNpaE78v6nWG4ptLSSOtIM5700Qir+wYqnAMayqrG7uEFiSWRo18wRRLB
q/Nza2lTWTNNTauKeKPAJoGJZdgkMGFnYV4djV5nSaPL8qmx690aY0lDPGxVBaVs999gbdzZTKPW
Go2csm8wGrXWRUjBkFbSZJi+VvH7zCzP3gMnYP8mw+tMTqvp8RkjTSPXVNJm4zMzTCwiTEKn8TjQ
3t5OHR0dLFbI1GkIzM9rECsQTsuoET9ZviUWMcqopbrmDlpR1EgTU8zX0msoY2cLNbciSFH/nUNg
dXEjTcAiVEq5wQjH/2FdlWFcqmiK0bDjf4kVMYHuHLwJZO3CWhHV4rPtqGkTn093zEjRuOQqKq5C
L0qn9jOxWP1R8ARAmITPP/9cLBOKJYBZrFAJS66eeOIJdPLJp9Bpp5xC5555Kp140sksGzrV+L5O
OvGndNqpp5ivnUJnnnYqnXXG6XT8ccdpv28IS4ifcsqpdPwJJ3mUFwqdZJyD+P3Ek+mnhnBuJ5zw
U/F/1p2LVdjuhBNOoBOMck4/FZ/lNOO6OKmr3K7yI1AnG/8Pu5+TxeoPwlLRb7zxhtskvPnmm2Kt
axaLxWKxWCzoiSeecJuEnTt30vr16yk1NZXFCq1SUii/YBN9PSOVhsxOZznQoFlpNG15NuXl5lBO
Tg6lGN+l9js2tTE9jZan5tO3M9O05QWqwcZ5TFiUSVlZWTRvTQ4Nnp1Gw+ca7xmvf5mYSvl5+X7P
TSo9za00Q5kbMygzPZU2pGdRcuYm2pyfSxMWZ4rjdR8/jb4xrh0cE9+Hel69pW9nGN9rWgGlp9r7
jCxWf1BycjJt376dAxeZ8FPdTDRyXQ1NTK1lOdSo9TW0dpv9oLnpWfU0LkVfVjBCmZPS62nshhqa
gL83uF+bl+fOi2AXdV7G7gaiFVtaqdpM3LiznmjYmmpRPo6Jn/j8WaXt1NJJNHVjPY0Pw2fzp9HG
ORRXO5zGwTD9BDYJTNjBoj/WHAmYVoepb3KaH35H8h9sh2l+sZh0SX4X6mtIYDRxg8v8Jr2DaZET
k92rQar7h1Ly3OSUxaqGnlMifdHY0kGDksqEsGKlS9kfyZeQS2NWZnVX6mZcB8UV3amft1a29riO
ekM4jyLlPBgmlmCTwISdGRuruhp9VP4jzYx7yN6HChjC30i0k2MYirK6VpGtL5aMAr4X2fiiocdn
R54DGKfdtb7zIlQYBgFZEHvr+8J55ZU6zxuAnAobtjYIExCf6qLNZu4BPKN3dHQ/qeMawDoTQ1eW
m6+4yd3d02z2hnB97qhik8DEJmwSmJCz1dUipu+1tHWIlL2yYkcjiN+XGa/hfbDdqHxLDLW0e3bn
Tk3vNhb9XficaIiSjQYUzDKespFVccXmerHehT9kGdZynUoaONljoBPew/8Qjb1TWts7KHtnE7Up
hsAbSLKErJEqMBZ9cU2wSWBiGTYJTMhpau2g2ZnV9M2y0q5GB+sNoHFRu499gcWCZGMl9vfRcFkl
zYivxi4ShPPDU/Xc7GpamFtDc7JraN2WevMbsMfO6laRzVJXvhPhXNBDgEYcDTFk/f7wt2ykMSzg
FCxVXW+aQ38gM+OC3O5kTcjOODip+5roTQVjElraOqmmsa1HemqGiRbYJDBhI8tocNBYo+sYXeg7
jAbNLis214nGD/u5x+XtPS2jex5j82iQxhp/90WjYkeywUXDvKumjYrKm8VY/beGsXLCOM0aDTBk
clxffd2XUEacGfswOaVKLOuM19Uy8L/Ewk6If/huRbno5cAaDb0BjpK+vVFcSzgnKXlu4RQ+97bK
niahrR1JZ3p+flx70zdW05ysarES5pAVZeY7DBN9sElgwkqV8RRVaDSAzcYTlVO2VbXS5FQXlZjm
YpLRiHnrUUCDAYOQkOZekhhg+WI7xqIvBPMDIySHExBXgGWVy+r8r8sgSdnW0BXPAeE7QM8NvgOU
Zachld8bzgerOAIEmoJpGdWigZSxEcONn3KtBgw3fLWklGqa7PUMhAp1yAHn5e/zhULyGOg9wTok
rea1jDUocD5qAOeqwnrRC4ZzhPC9YfiIYaIVNglM1DDQS3czXhtpVMZjjKfqdrMVW1LQHQsRiZLB
icGQXtIgeltgnFAWnrLnZHUvzzzXT/An9kNDm7qtUZRj7elpbu0UcRIZJY2iZwGGT4Kln7e5en89
A/x765vbxUwJDI3AJHm7JiB8Rqvke9Z9fAnb47uUpgwxIzBk+D8idgI9DZk7GmnoyjKP/UYY2xf6
WbGTYSIZNglM1LDeaLDQ8KsVPH5Hxb3BeKqWzM+t8XjC9ieUgcZD914ohWOIJ3Lj3DAkUtPkbAqh
jhXGkyvKjTMara1Kl/jmsmYx7OCtMcTraOCWGmYKLCtwtlgTDEQkgC592aOA7wHDLLhGpAmbYHzP
VqnbYRtf35G319XrBb/LHhd1Owjmq6N3O1sYJqSwSWCiCjz1qj0EaAzUIYbiymZRMXur4K3Cdqjc
MXasVvyhFspGA7W6qF6M64cSBPlJECiHzyTH7uXx8bv8Gz8HLy8z9iMqqWoVgaZyOmK0UdvcLmIp
cB2MN75fBIEiFmZHdYuYOoqeB1WgsqFdBHzm7mqixPQqsS/Mm/r/x3dkfc2usK80Ifg/IOaEYaIV
NglMVIFubvnkKCvy+pbuR7V5OTVd7+sqcFVoAPBUj25iYG1YQynxRClbqTCSmFElvhN5XHwePC1D
stHDT0xNBXIqqr9cDJHO7iAaYsQUIL4A3xUMA34OM/5fME4YVnBiFLAvzAHKgxHBNYVYhtomrNxp
HpBhogg2CUzUEZ/mzqEAM4CnRivoWUBXu7Xylo2l3BcGobDc3UVf1dguGk9sp+4XCqFMBLOFE3wP
aNCsBgGNHhJTzTQaqgqjMUTcxvhk9ywGNTC/kyfpUZvhl6amuUQjvyTfPfyypqje4zv1JXzfuKaW
KEM3GxGnsKLMuN4qhFlwMsOHYSIBNglM1LF+i7vixtMentCsLDUqabwvn5pRccM0YFoaotGnpVfR
muJ6qjGMAcAcfGwTLoOAsjETIZQ0Gy0ankyRjAozI2CMYAjUY+PvhXnuBmu7y22GMMyQudPZegux
howVwfWB/5/dngTZgyDBMA7Ae2JaqvH/QBZJ2XvDMNEAmwQm6sgz0/OiC18dj5es3+KeGogKfllB
HRVXNHtN4oMeBDzphcMgQBibRmKpUKF2WcMYoDsbnxW9I2pjhs8DEyWnMwIEJ/bFjIRoZVN5C31n
XBv+TAK+a/RMTc/o/j9jqEHGyqRubxTvY1v8n9Dj0xuU17WJIN4McziNYQKBTQITdVTWuxt2dOFb
0zlLECymMxBW4lPDm/4ZDXgoZjGoJG2qEwsiyUh9nD/WwcDfME9iOGVNOU0xPps0FRizX2R2oTP2
wToS+E7RIwUzIM2k/B3fNd5H75Rq4EpcLfT10lLxGhprmDl5TcB4NChxNOFge1WruPZw3rhXVhS6
Y1AYxilsEpioZGZeKy3Zav4RBKiwZcUfCo3fUEUTUmq6NG5DNSVm1lJZA9GO2g6qD8GD/FZXq5h/
Lw0Bnkxluuv0kkaRgKrUEoiIIQkmMNCeJxU2Gv/bavH/HL2uisYmV9NE4/+bmFlHxS69Cfx2eSXV
NBNVN7Z7mAT0Ls1V8lmECtgO+NF125ppzPpqcb7yOhy+xkUFFXwN9DeSk5OppaVnNtBQsG7dOqqq
qnKbhIaGBqqurqba2loP1dTUiPdCjcvl6nEseTz89Ie6rT9VVnouEqMD21j3Q/lNTT2D4uzQ3Nws
vlxrmVZVVPhPpoNtdPtahfPFMX3R2tqqPS/87zvVxyAHyP2tZaqyc25OKN6yhX4YPYqe+stf6Prr
rqNf/vKX9Ktf/YouueQS8ftdd91Fr7zyCiUkJNCOHTvMvTxBamHMBAhlLwIMwsjlJfT94iIatnRr
l4Yu2UIDFxYLfTW/iMav3k5NDXU9viNcN21t9irycuP85+fUdGVoxJoPMigOaYEDZfXq1fTPf/6T
brnlFrr44ovFdwpde+219OSTT9K8efOoI8iJ/76uw0CR+1vLVGX3OrTWBw11tdTcWEc7yqspr6SS
MrdUUH6Ji3aUVVNrUz011Hv+L6EWY/vP5mymzbtqqN6ow1WTAMHgYfplKKgwznde2i76cn4xfbOg
mIYs3uJx/Unhvfh1JeL8ULcF+39UsVvnQaj/cQ2EAtRbaCg/+eQTuu++++jSSy8VdYGsDy677DJ6
8MEH6cMPP6Q5c+aI4zulwmYdjOvPX3uJ7wjXoW5/VXav1Z/85Cd04okn0ubNm8WxdWU5UV1dnTg2
vi+UPXnyZLdJuP7668UL3hRK0tPTtceQOuqoo8wtvYNtdPt6Ez60N/Cebh8pfGlOeeGFF7Rl6eQP
3T6+5IuhQ4dq94HsfO86nPwvgmHbtm30xBNP0OGHH96j3L333lvI+rrUwQcfTFdccQVtKiigGqPC
RpQ54hlCaRCgqbkddO2Nt2nPwa722GMPOvvss0Uj/cUXX9D27dvNb0CHp7Gra+5+onXi+VDBP/PM
M7Tvvvt6nMtee+3l8bcqVLzFxcVmCc7wdR0ecsgh5lbOCNV16K8+cKqTTjie8F9B17/1esFrcipq
MOiOa0cHHXSQaFTfeeedoB8GndR5EK6BYFi5ciXdc8892rL91QfHHXecaPPsoivDm/yVq9vHl/xx
wAEHaPcLlWbPnu02CXAh06ZNo7feeov22WefHht+/vnn4oRCwc9+9rMe5Z9wwgnCueAcNm7caG7p
HWyTmJhI7733nteK7I9//CNNmDCBlixZ4vcp+ccff6Rvv/2WzjrrrB7l7LfffuZW9kHFvmDBAho1
ahSdd955Pcq84IILaNy4ceLc/JGUlCTc3HPPPdejHKm///3vNGPGDNE95As8IeGf/u6774rK2FrO
NddcY25pH/wv5s6dS59++qm2osZT/aRJk2j9+vXmHs7YtWsX3XTTTR5l/uIXvxBlbt3ac7wBbn76
9Ok0YMAAj32gz4ZNoXFpjaK7N5RDDFLo3h2xMJfeHjKNnn3zUzr6qCN7nAN07x+foCdf/oD+9tbH
9J///Md4CvoPPfroo3Tqqadqt8d1iWs5HOBaUI/18MMP04YNGzy6MPGdzp8/n26++WaPbaGnn37a
3Mo+uA7RI4Fr5rDDDutR5pVXXmluaR/1Ojz66KN7lPmb3/xG3Ed2rkPcuxMnThTXrrUcVMqoD1Ff
qfr444/p+eefN8yd53d01umn06wi8nq9wSgga6S32Bo7zF+wSNwPDz31osexpQZcfQM9/frH9OQr
H9DL//wP3X3Xndrt/ve//5klOqekpIRmzZpFAwcOpNONz6wrH0/1I0eOFNeSnR5eHajjrOXDLKAO
1/VE4eECde1pp53msQ+Um5trbuWbZcuWibYJ9ay1DCm0RTNnzqRNmzaZe+lBTx2uw6eeekpbzp57
7il6QadOnWrrWlX3Rdt9++2300svvSSuR3ltfvXVV3T88cd7bPuvf/3LYxvUQ+gptLZX3333nT4m
Qd1IKhTs3LmzR7lo5IMBBsBaJr6AQHnjjTd6lIdu12C49dZbu8qCSQoU0fWjnBeUlZVlvusc9byk
0NUcDHhql2W9/PLL5quBgcpYPTfc6E4+LwyWuv+dj79ECTlt2so6VIJRmJTRSNPyieJWb/U4PjR2
UQ7NKDT+l1mtNLtAP5aNxg7DJtZ9Tz75ZK0xChSYLVn2SSedROXl5eY73snLyxPnoZ4XzGEgPW4S
9Jqo5UGo6IJBvQ6DKQtd2Op5/fnPfzbf8U5xFdERRx0rtkdPwkzDJOiuFSkEF8K4BhrMOCO7ieZv
aqOZW4he+88Qj/M9/dTTaEkFUXx2G8VtbKFUJV0Heo/UbaEXX3zRfDc4DjzwQI9y0fUfLDDSapl3
3HGHrWtWAgOp7r906VLzHfvAjKhlQJmZmea7zhg2bFiPsrwNj3pD7nfOOeeYr+hBj5F6HF9MmTKl
a7tvvvlGbxIuvPBCjwIhONVg0VUGuAmDZf/99/co05+b88dVV13lUR4ElxUo6hBLXFyc+WpgqOcE
BYu1PAi9NIECRy3LaWwMfOrVb3/7W49zCvT7Lygo6CrjjvsfF0MCuoo6HPrRuN/VzwDNM9p4LGGN
iHNEzvsCXap4srCWgbHVYFErcTw9OAVPLOo5QRjTDBRrWVAwdY7aIOieMO2CHgX1nB566CHzHd8M
mrGha595232bBAhDXzALuCbQp2BnZo5kYrKZljqlhiat3u5xvlddcz0lGtWhPAZ6LVTwFKluDy1f
vtx8N3AwHKWWOXjwYPOdwDj2WLfpkhoyZIj5jjPEk7FZBnoYAkE9DyhQUD8GW5bcr76+3nxFDx50
1eP4q5uvu+46sd2bb76pNwm6brYjjjjCfDcw5BcCx6OWi2GBYLnooos8ygw2KEb3xA6hqywQECQk
y0BXbjCo54MxxWDBk5FaplSgRgvdZLKMQEHXsHouzz77rPlOYLz77r9EOdfdfDvNMD5WOIYadEKP
wblnn+3xWWYbJgFBbKuK7D95n3HGGR5lQNnZ2ea7zlF7AmBCAsU6PBdMr6C34TSYvEBA168sIxis
dYFdkwBOPc39f8N18MNa97RJ3XUihfcR0IgZN4ibsYXhJeaYq30icBZTMdXzveKqayjR+ArlMTC8
sbKwXsx+kUGvP/3pTz32wf81WBDnoJaJ7zFQrL0SCEgOBjnk/e9//9t8xRnquUDBoJaDoSwnwBhg
v3PPPdd8xTtOTQJ6bLHdX//6V989CdanhTVr1phbOAdBZygD3aVqmU5uOm84/QL8kZqa6lGeKrwX
CHL/0tJS85XAUM8FPSjBonuSkAqEjIyMoPZ/7bXXPM4BQwyhAGWdd/aZ4nddEFk4hMbhzNM9x0KN
Bz7aHcDsA12AUiCg610tI9DrWaKWBcHgBcIHH3zQoywpuzM+VNLS0rr2DwbEOqjn4qS+kg1lSWUD
zcmpEz0FdoJlYRZgJJEV1A4yDTlMwtS0So/zlSYBZUqTgvPAPTAoqZR2NhBNi5/ksQ8ULO+//75H
eeiRCQTrsBuGSIIFwwMo6y9/+Yv5ijPU84GBCQa1LKf1ueyh/u9//2u+4p1A2khsd+ONN+pNAqaP
YANEPasFI+AuULA/Aivk71KRaBJkBfOnP/1JjNWqZUOBRALLffGdBoN6HqEwCfJmfuyxxzzKhtDF
5xR54QbSy7Fly5Ye5+CvG80O+MYHXHMT7WWUt9t48kKiIWvFHA7pTEKgFBUVeZQD2RkfV0EQqLp/
MPExEgT8qmVCgfRyyOtQPkyoCqQXE8HD2DeYnhJgfWBwUl8hIBxBaBIk1UpIdYkGWm20dZJZHv3h
anDnYEBZvkyCLE81KXgtPr2Wtld293RKBdqDIwmFSRg+fLhHGVCoQFmXX365+Zcz1PMJtg4OpqxF
ixaJ/XzPgHITSBuJQPbf/e53epMgx38A5mCqhSP40CkIhsO+srteLS+SexJkJayWDQVyYch9gz23
YM/DiryZUdljtoVaPoTgRidgqAf7BXJuP//5zz2Off/995vvBE5TSwdN2dhIr3w+hn597Y00Kbv3
YhJCaRKALqbHCXKcUQpd8qFALRPyF0SlQ16HCJRau3ZtjzJ//etfm1vaQz7gBHuPBGMSvIHlwpGm
eaTxRO/NKKABn7BBn7650bimsUJl0qZaGrG6uwxvJiE+jyh5q/vBZrxZdvdxjOu0qOf/MNhh0VCY
BHV/aNCgQeY7wYNu9EADWtVzCvb6CmVZvgimjdTWMnKOKYiPj/co/M477xSvO0HuK1HLw5SrYAmX
SZAVAgJ51PIh9LY4QXYXR6pJwE+gm+bz0UcfiffsgM+HfZyeW2FhYY/j2p2i5ItFebWiQsaMg6m5
nV2VY29o+mais89wbhIaWztoaUGdaAhU1CBMqS+//NJ81zeY0mjdN1To4loqbCQKU7Feh6+++mqP
MhEUa5dAr0Mr4TAJAGuJFJQ2d/UCWK8dNOQTNSYB1wWCXtEbgWEDdV9fJmGlmZY5o6RBxD2ox5q7
xbNegYIJQgXBmgQ1wFAqUlDPKWZNAgpR8wOohUNOAgMR1Yp9MLVQopaFTG7BEm6TAJBDQj0G5GSO
OC4A7BPpJgFYp8tAmPpjh0ArZ3yX1mMGC1bbw/oOaoXYG0LFPWpNuah8f3bOmY4/U9bORlqcX0t1
LT2nSFqTxGAaox0wJ1rdD702oUJnopF/wQm66xC9B9Zy7fZ+9KVJwFx4u3kttlS0iMReGALDUIBs
9PETvQQqMzZWdZkDTJmU28l9YBKmpPQ0CVPz3XELEpiE7n2qKX5Dqcc+ULAEaxKQO0fd/4YbbjDf
6XvU8wr2+gplWb4Ii0lAkhPJP/7xD48DILuWXeQ+KmpZdis5X/SGSQC6ZDI//PCD+a5vcAFg+2gw
CQAmUT0WZGfsK9DK2RrBfNttt5nvBE7ursYeT03hFipfVOLowQBHHuGZIdIXO2taxYp9uuWvJb//
/e89yvNXpsSaJAXJXEKJWjaEGUdO8HYdyvtGFXqd/NGXJkFGz9ultLZVzDiYllHl0YCjl6HETLW9
ILdGvIdeMSxtjtUdYRgw9RHmAj0PP6yvog1b3RHvUjImAb0Pcv2OtO0NXatSTtrYRB8Pn+6xz1tv
vyO2Cwb5/5RyahLUfaFgEj2FGvW8gr2+QlmWL0JqEuRYntqdLseZVdlBJmVAxaailoOTD5beMglA
lyEOwXr+kJVdtJgEBGeqx5LyR6CVs/U4Tp9EdWAamZ1o8lAJEeZ4whu9tjvgzGq2fDHdeFIcuKyU
NppL+7a09ZwrL5KbKOVBdnLwW/dxMoRkB6S6tR7DCd6uQ90wCeSPcJkEO1O2sR1SXAdCylZ3Aw6j
gGtpSX4t/ZjjNgi4xvCz0ByGwnvrjO1rm9vFdT5stfu6U89XmgSYCWwPkINhYFKpiEeYuw2m5vyu
7Q/cd2+altNKpfUdjnI1WAnGJOh6ppD1MFJQz6svZzc4IaQmQc69tD4JWBMMIVmJP4480p2Wdvfu
3eYrbtRyos0koEJWjyXlb9ZCtJkEsGrVKo/jQQhk9UUglTNiD6zHCSTQSQUVKbpxrQ15qIXKHELF
Hp9WRfGpLlphPBVK5P9dygpWb2w2zUBRRbN44ltTVE9VDe1dU+DUrOJqNjQpLJjjC916BCgnlOjW
f3GCr+sQSaWsZcOU+CJcJuEPf/iDeB3mRRXAQkMy+DaY46JHCb0EuL5gFKwzEvDTuvx47u4m+jap
Qsx2UM9XmgRco+iZQCwEyC9roRW7iJ567SOP7YfNy6SJ6Q00zFzbJL80sNlYwZgEJEpS94XKypRU
kX2Mel4Y/kPaY+RccCqr4Q9Ffe6NkJoERLWiEOvTP3JmqweBfLFixQqxjW7apFqG0wBAHb1pEoDu
u/C3MI1sLKLJJABczOoxIV/Bq4FUzqhcrccINjPlwtxa8fQkK9dQChWunGsOc4DjyOEFK/L/LiVB
u9/U2iG6gEeurqDCsmYqrmzpGnNGQp3hqyqow3AIzW0dXUbBOm8fSklJcb/phXB8v1bwhG09hpPp
q/6uQ3Q3W8vHHG5vhMsk2FWwxx283PsS5jAKuE7QE7DFuGYkSzY1Urul1/fKq6+jWcVEE1PraFxq
PS0r7s45oSY8OvaYo2nYghyaktXS4zjZO5uo1eHaEsGYBOt6IlCwU8dDifXcQqVQ1OfeCKlJQMIk
FIK0mlasFZ6vzFcyLzyeAqyoZQQyF99Kb5sEoHO76G3xhvzuos0kAMQHqMeFvPUkBVI5jx07tkf5
wTZiOdXGU3dOJyXmk1aTNzZ5VLx2JM0BnrCSNtVRsfHkv9WopJtavVeg1ntG5aslpaKSLzAMAgIs
USGPT3Ynu5mbXUObjac9ILuJAQyBWh7krwLVNXTB9tRYef3113scI5QmAehSQSMJk45wmYRDDz1U
1Dfnn39+l1DXWRc3C/a4GSWN4mnem1HA67gOxxpGIcdoxGEmQYP5uaV+dekVNHpJAQ2ZuYE+Gz2H
3huSQO+89WZXDNC+++xNT7/2Ec0s6KS49HrtcTDEgV6IBYbxtkswJsG6LxSpJgFZRj/77DNhuJwK
SZDUskJRn3sjpCYBUbkoBCuaWcE8VfVAuDF0YAlZvO/tQ6tlBDp2p9IXJgGIRBPKcaG//e1v5rue
yMYiGk0C0K3wuHDhQvPdbgKpnHXz4gNpxP702KN07z330MN/fIjuf/CPdMWt99NVtz3goSt/cx9d
fM1t9NQbn9kyCqgkpVBZovFGD4Bd5P9dCpTWtQlz0WiYi0kpLpqeUSV6DpZvrhMzMgYllVFBaZMY
cpiaXkWVxk+JvD+tZfpC9g6q8ta4Boqux8kJdq9DawphSLeWRbhMApI9+UIGeYfi3vRnFCA87X+3
opzqW9zXZFOTp0nwpxOM73PRbhKzHHTlS+Echq4so2w/641IrA29k/sZC/Sp+0JOFz4CGALDwy7q
cUy1f+SRR3oIPWAwn+j5tot6XjEZk/D999+LQnDT61APBOmWsxSpHI33vEX+q/uH4ovpK5MATjnl
FI9jQ7o85bKxiFaTANRjS1lv3kAqZ2Tos5aLhUWccv0td9I5P+u5OJlVB+y7Nz376r9pcmaztkKU
QgU8wXiyH2c8raGCXGHONXeCLnBRLl1eVNFCE43y0W2cuaOR8kqbCb26MAqIeAeuRs+xZ+vThyzT
F/gfWfcJNCWtN5Cd1HoMJwR7HSJbp0q4TIKdOgHbyeyywTIzs1r0MHkzCrhGZT4FXCrNLZ7DDehJ
GLEghwZNX09vDZxMN912t8f70JP/eFdMk1TLxfHQo4Xy5WvouYhP7Z5K6YtgTALG+NV9Id0DiT9w
7yHzq7UsnZwkFlP3C/b6CmVZvgipSZD/XG8mAY5MPZg1wBF51uV73lD3D8UX05cmAajHlrKmNcXn
xOvRbBJ04+GQSqCVs7VMpAS1y66aVvGUPyWnnabkEaEa27mjhE42F9hRNXbZJppjtCeTM7vHXnVC
JYmnuG0ud5d/YXn32K8T5P9dSoL4A3QRo5cAww1WZPexFcSDqOVdccUV5ju+UfeBQrGIj8q9997r
Ub6/AFcrTq5DXeItSKUvTQL+J9bzCYZVRfXCKLiHF3qaBTTkCNL9bmUlpVqmQMqYhAmpdaLnbO52
w9A9+7LHNlDcut00IaWm69qHQVi3pV6YZGkUMHtnipJvwRfy/ynlxCRgJoO6L4Q1ZoIBuSusZaIX
IJB1QdQygr2+QlmWL0JqErDiHgrxFv2MKFP1YJAaeYroX7z29ttvm6/0RHV3wXbXgHCZhMsuu8x8
xTe6NQcgNemUbCyi2SQA3RroWFVQEmjljGEna7n+2FjSSFONSgsGQVZkqOAmJLtodkEHDZrmjq+R
unzAVTTLMAiycpXCPqiAEYCIcvA3ypyXU2MeKXBOPe10j3OYtdU9tXHdlgYqr2+jdtFL7D2mwYpa
FoR02nbA+gfWfUPJ6ad7fs7HH3/cfMceobgOMRQh6UuTkJOTQ4sXLzb/Cg1YFAzXNa5Lb2ZhXHIV
JaR6JlO6/Ep3xkVs786N4BLLlR952CEe211y2QCabd4b8l4CGPbCMeUx0KNWZend0hGMSQDqvpDT
vBs6rHEzL7/8svmOM9Qygr2+QlmWL0JqEh544AFRiK9/6tmW5W8xNi+Rr/kCX4a6f7CE2iTIBZ6c
XJi6sWIEOUnkZ452kwB0CX3kNSCXxXZ6bljdzVqmr/zxc40GHE9PugpT/L2hmiat9exmH/Dra8V0
MHU7TDHDU9rszGoRjDhxg3vaGbpVbaQf8MvxJ3oOR4GZG6u7cjh8s6yUiizpl72BBYPUsmR5dtBl
tExKSjLfDR5r2U67hwO5DnWLkiHhGQj0OrQSiEkIJ0jVjTgWNPiyMZcas76KJmsyLuLqQsqDlG0N
4lqfkNZAE3/sGQf03qBJNCWrVVz/802DnG8xCTgm1n/wR7AmIdi8GzoQDK2WF2hcjlpGsNdXKMvy
RUhNgpyVMH78ePOVnkydOtXjgBCQqYtV06ADX4Z132AItUmQEeQo1wmyF0bV1VdfLd6L1LUb5BK9
TipncMYZPbvyMZYI8LvTc8vLy+tRnm6q5e7aVlFRIe2xWkFahRS109JdHuXJOeN4XxoENNYlVZ5D
CUHkkOnBCSed6nEOYIZhEnD+qOjRowBqm9qNCt4lghe9IQ281D333GO+4x/dKpKhyGoJdMNQTgnE
JABrJkkI0eYAvwd7j0SaSZBU1LWJ6xf3Asym6PnKraN1xZ7DDZdbekNxfWF6Jfp+r7+mZ9rr6dmN
9P1ql8gACRCHg6EH9d7CdbukwPdMh2BNgm7thq+//tp8NzCsJsHptSZRywj2+gplWb4IqUk4+uij
RSHz5883X9GjHhCSKz1C/laKxJeh7hssoTYJ48aNE+VgLXOnoPdBPRcIc7xlLvJIMwnS2ATiqtVz
kZo9e7b4Gci5nXmm5zoHEJ4IJQjmG7rCeIIyKkW10tLJ17K5eB9TuhpaQtBVoNDS1iFiF9R4ghNP
9FxqHGAmgziHleXi77VGxf79yjJR6SPjog75ZGwtywm679dOtkZ/PPfccx5l+hpq9AYWb8K+gVTc
6rGlpk2bJn4Ge4+EyiQg4LS0VP+/DZSd1a2iwYfRlU/+HW2egYsXX+zZG9puXJuTU10iyBHJN9Rt
oWuuu4FgD2SCL29ZS3ENy3gdHcGaBKDuLxUMOAe1LDYJ9ujxrctCMjIyzFf06BJeQHbWqMeXoe4T
LKE2CZMmTRLlBLrePtawV88HQrQzfkaaSZAxJDALTikpKfE4H1WBnNumTZt6lCPXfG9o7SQkF7J2
sXqTP5OAp6Ol+c5nK3gDay58Z1TYaPgxDCI5+RTPVSAzjUPCDOAcUPmickcyJTlmvMrLDArrNY7c
Ek7RzSJBwGGwWMsMBCwLjn3tpD22gsbXeg5Swd4jcuhRKhCTgFle2Hfp0qXmK6EjdVujmA0jabaY
ySuu8r2A3ueff+6xPZRoGCyB4RNmmCYB9506rIffYbSbveQICYVJ0MWdOFkJ1AqbhO5jqQ9f/vBq
EuysR6AeVAp5t/0hE3lIBQue+NXynHwBOmQ+CHUlTCcgTa56PqoizSTIqHSZbtYp1i48qUDP7cUX
X+xR1qiRI2jlDnf+eVlJ+ZPbJHgfbkBZs7OCD0wEG7Y2iCcrWYkitbLMpXDyyZ4xCbO3uY8vhQoY
+6ESRmCaDut38uSTT5rvOEc2xqp8xX7447XXXvMoa/r06eY7zkDji/0DfVLHFDb1PKSCvUesPQmB
mBg51Ngb7Kjy7ElA4OL4LKJKc3EnHYidUveBdrvcw2DZOw3za1zPiIPATAfVKMBoI2+IDmvejECT
o51zzjke5UB2FvjSEY7hBvxvg0EtKypMgrpe/axZs8xXvSPzIUjZTYyk7gNhMaFgkPnSpYLNzqW6
4EBBdLN6TlKhNAmBmhgVOTwyYMAA8xXnIPGWel5QMBf87bf9pkd54+cnU3xup0cD60tIDpOQUu5R
hjQJGK5AxVfTGFxXe31zu8iGaF0jAsFhWIcBnHSyZ0xCQvJuGm9ONYMxUJ/QUE61JXLcugJrKFZv
POaYYzzKhJws/y6xBlIGY14uueQSUQZ+Bgqi1dXzgYKteK1PnzBZThgzZozYD7NLeoPZWdUe54ue
hBmb3O+1tHfQHON9kRBJ6QDA8LC6D3TAgd1B10vNjJ9I7oVrW73Wh+A+sqwjAazmEb2zgWJdHh0K
5EEQ+WvUMrxN8/eHWgYUKNZF9EIx088bWP5APRbWy7GLxyccOnRoVyGjR482X/UOhiTUA/sKdlRR
94HQDRoM1vLQRRgM6jr27e3+p/t444033vA4LygYkwDzYy0vWGQ5e+yxh/lKYFx4oWcSo0Ar562u
NsqoJrrqhp4peN/870iaudmouNPqPCoqnSZlNNJgyxRIzG5IyMd0sEqRWyFY8HRlrTQhDBtk7nKb
BPX40NOvfkgzi0hMV4tPq6bJqVWEVSPHJbuEsRmVXE9F9USuyoquJYel7N5fdsD/Ry0bsrMUuERm
VZW66667zHcCA9efLCsYpNmQCtYkDBw40KM8dcaSP9ScMU7NhRPQ3re0d9LMnEYa/mOmx/meccaZ
lGNmx16cVyuuV2ioYUjTtnfXRcOGj/LYD7r6ht+Y77pBjxmubfVax9DZPE1vgjWfR7B5DnS9HbpE
fr6wDpG/8sor5jvOUMuAAkWXTiBcHHzwwR7HcTKzqeusrIFR3lIuW1FzHtgBEarqcaBbbrnFfNc5
usQbgXadA7kwldRvfuN5ozgFsxvU8oIxCbio1bIgjNsFCm5ctawvv/zSfCcw1IreTuWMp+2VhXVi
6uGKzXVijfwRRgX2g9FoztlqPEW/96XH+UEDrrmJRi7Op2m57RSf3WYYhnqakForhheQDAYGIsF4
b3Yh0c8v9OxiQ+BeKEH8AHol1C5YZHFEj0e6i2jhj/M8ji/18gff0piU7t6zjWVEcYapGbt6F/33
h9l0842eKypiqp/M0hhKrE8XkJ3VXdWHCSiQQEUVzEZQywu2QVENULAmQQ4VqEIgsj+sK6gik204
WbuLaJphoO9+6AmP40KjFmTTqp2Gqc3uEPcLhrimG04c2RwlGUY7f+vd7vgkVTff2j0DJmmTO6mT
er1DyJ1Q7Oq+PnXLe2OJ/WDRrd2B1MpyFU5fWNs3KBDj9sknn/QoJ9BZF7ppyboU48GCSQjW4zip
C3/y6quv0pVXXtmjECkkFEL+6/x84xFMw4gRI8R2vtLooqsJDbf1aVMVbsb77rtPdFn6i7gePHiw
GBv0VR7m2eK8kWvdX3n4bKiIfZWHaZ3o6g1kyVLVBTs1CbiQMPXttNM8A+BU4bxxs8Ap+wNR3xj3
RUY8XVn43nA83dod/qitre0qx9tQSGNrBy0rMBryNJfoXse4phSeStQKKMFobOPW7qQbbvV8KoF+
dv4v6Nk3PqWBU1fRyAU5ovIbtayIRsxOpsdeeIuOOKznkwcUarD6owxEhEF45cNvacBtD9LFl7iz
7vnSKaefJXKOnP+z8+hIy/nimsGMIXyn4USmYbfqhRdeEBUWxn8xrICMdTCp6kMBUpJj6mogYBYM
6oRTT/UcjpEK5jrEPSbLcTokN3z4cHr00Ud7LI2vE+5J1J1YI+CGG24QQ3e6qcFQRUWFeYTQgrrt
ySefoPvuf5DOPOtc7bGhX15xNV1+87306Q9zafi6ntdU9q5mmlZAdP/jnjNVIMTVzJkzW2xX19wp
hupkLA2u+/EptTR4+jp67OGH6LrrruuxvypM20XWXm/tiT+wYKCuLrz22mtFECZiSOQsEvR2IV8H
2gDr9tC5554rtvMH6lVcq9b8QKqQwRTb+KqD0XYgHTryzOjyQEihPkf7hnYuEHBNIBAd94+vc4Zu
uukm0XbguveGsZ1+Z6tGjRpl7tITfDm+4gDQFakr05v8VYy6qVy+5K88fDbdfjphMSKnqM7aycp4
QD22HfnD2g3oS4GACG7r/vIZA0mDEDCILktUMtIM+BJ6B6ZjiGHVdnro/16nn56gNzfe9Jvb7qDX
X39DNErBxr7oSMyo6vosSPesOwdfOv+iS+myywcYN+uNInJ79uw5tGuX8VjYyyDHxfHHH689R6sQ
i2QnQNkX4b4O0ZgEsr+3Rj5YhQvVmNvRtbfeTRMz23qs6IgFor5fVU4zCom+mLSM7rj7vh77Lly4
QGyLIEgsPIbcDDAKCdmtdNvDL/TY3pd8tSd2wFAD1gvRxSv4EoaS0XOFHmO7Q8m6cnzJG7qF7Hwp
0J5Pp9cEhOveG+G7ehkPML0PT/GhmJce6eAGXLDAXaGAaUaFggA9dFXip9UI2BHMQkJOm0irHLdm
B307dQ09+voX9MdnX6P7n3qZHjD01N9fFzMhYAgqXN1dqeEE56Z+JhiF6UUk8uXjdwjpbtEVbGxG
KS6iXNMnrjQeeFb1vh/wSYXxxIsl4DGv/6WXXhK9BwhCQ4yS0zHgvgaVsnodxgJpxmWfaDT08tpT
FW8GMCIVONI8A3UUC8uVo9GPS6unSTluc19bVUlL04oofs4y6uzwbFTXb3FncJRGYYZx3eeH3of7
Zffu3WJWDRIwYSYQrlkEsSIwEWYEhra8vHtaMuMMNglMWIlPqxI9B+owQiDC/hCe2keuraL4jO4e
mQzj/o8zno5q+sB/jTXOTZoE/MTc8cydTVTT1CF+xzAKfmYZr0lCncSJYVQQUKsmHMN9Mxr3zZpy
WrG53jAJbmewOL+WtivZRhdi6My4XrEP7rNJ5oqPSIWwzex46DD2xfXdaiZbQgZHdWoyhhAR4Mj0
H9gkMH5BpdJmqKSqlbZWttBO4ymkuqmd6prb1ZlUPUA0tZr3PVCJSs6oiNDgJhimY+OO4KaRhhLZ
O4JKFZLr7a8tbjDOt5wW5NZQfXOHSPUct8FFre2dIghxq49sdQwTDMiVgMZaGmustbC0oE5cn8jh
gZiCkca9hN+xnoMkb3ezx/2K+w0m30q2YRIw9RHxOLj2cQz1XsWxc3c7n6LIRCZsEhivoEHLKGkU
awqgYkGDiJ/LNrmzAqoR99hWZWGue7qVrDwCESocVGx4EscYqvUYkUBpbZtIjYvKUqayhYn6dlmp
R0W5pqieNhgVcn5ZM6Ub3+kWw2wxTDjAKqMTk92NPHoQlprrLMDs5xgmFouYwQygt+EHYxsJ4hLk
kIO8B5EuvKii57WK3goZk6DesxDuBfV+YKIbNglMD/Dki+lRqDAwVGDtukTlgzgDBO1hqWZUSGqD
iOQraNjVisOpcBxUcNONY4Qip0E4gSFSl89dv7VepGheapopgF4YhulNkFIZPXAw6+V1ntcf1l3A
PYqn/jXF3UN3q4vqPHIhwAgUawwt1ihBzxjMgHrfSsHcIx8JE/2wSWC62FzWJDK2oeJAA627+SE0
4DAOqIDijKcSrEingsZRdnfq9rcjVDJqytdI7EXQgZ6XQUnuNLZNXvLaM0xvgbVE0JDjfkSPwuqi
+q7hOqz5gF7CVeaKjxLc+/Lexe+413XAUMBoeLvPYU7UhE1MdMImgaFNZc00yzQH7ieA7pteGAJT
1soAJkEubYxgPHVVODXyWd3HrrAfKqCZG6vp66WlER/s12icH3pYvllWSpk7eDyWiQxwHyLZEe5r
GdcD44D7aptL37uFZaCxLe75KakumrjBReWatR8wfIHyvS3bLnsZmOiGTUKMg5scwwqoRKw3ORpq
VCpycRergUAlgNdBzu5m4wm6lBbldXexYxwe+6tl+pIsGz9hWPJLm0W64pWmEYlksBrejzk15GoI
PI03w4QDxL/MUPJ5QPgd99g04/VNZZ6mdk1Rnbhv8b6/Gdsw796GFlE/wGAw0Q2bhBgFHeHIfrii
0HMKkyp0Nc5Ruvyt050gVDaoCGSvAZ5aECUNMFwgjQUqDPlkAeE1KbyOY2H8E+OhqJyQrhkgOyPD
MMGDAFvrUz9mOFhXiBRZRI37HI2/r+EC3KcDl5UKQ4F7GPeyWrb7/uaehGiHTUKMoI6Ol9a2ipsX
FYQ3gwDhfQQxSjCvWre9tfFHY499USFhbjYa/rgUl3v+tlmZoGKRwpjnPOMpHE88q4rqu4YtOsKw
XgHDxBq7a9tE7AFMO+IRVKOA+xH3n8x7AGZl1oh7FvsgbsEbm8ubxZTf2uZ242HAPZvCahRQDtZl
YaIXNglRhEyCAlrbO6jdbETxu645bTPub0xXTN3eQJOMp33crOg5QHAiGnzc1OoNrQo9AHIoAcgV
5OT7qAxQubifFrqF/WAkYBQQ/YygKLn8MZZmxnjoiNUVtKWihXZVt4r8AQzDhA/MvME9BxqMRh89
AOq9jvsaUyMlmJmDbaz48+wwIbppkbjnuUcwemGTEAU0tXYYjrxCzL1H8hN0xWMKIlZyw02YkKof
90ve2iC6GFEJoPGGKcATPp4AwCizkZc3s9wG7h/Hk+vEY1zyqyWl4n3x5GEIZeIcxLbGkwmGC1Cx
LDHMB8xJiWEArCCBEM4nI4KSITFMLLDEbKSRQwH3KYy8vPdx/6pZEmHukX1RpcYwGpiOjJ6Iynrv
cTcLjP10gYwDk9yLLjHRB5uECAcJTsatczfguNlwA6Ihx9+y0UaDvW5Lg8iKqJp9jCmix2BOVrVo
xLE/nP4m0yRk7mwUjTzKQJlo9DFFapGxj/WpAXOpERE9HgGMxvlgRgTIMioNmBFQaJSr9nZYwXaY
HsgwTO+CoQMJzL+sE2AU8LN7unEn7appEz0OKi7DGAw1zAUMhuyJwAMBzAQSnSFIWTLceMCQ9ZUU
6hmeDhmdsEmIUDAWuHxTnegmtN5wOqHxx3YSJPhBdkSZCAXloELAdnKe9I9GxYCMagg8RPrV8rrw
RuYjp0I6VxQM06sgMyoac6y7oIL6QAoGAIHMvmhr7xTJ0+TDCXojpNBDKVM8N7d1GO9310mon3AM
mIuNJXz/RxtsEiIQPM27I5G7uwTVG1q+pgpPA7Mz3SsfVja0i9wCmNq41VzABTMTcCPjNRkYWFbX
RqsK60T61K2VzdQS5oRFMjaBYZi+BfFJeLqX9Qd+R7pwf2CKr5q6GT/lECR6GSUY1kDPIeKfrEZB
DmMy0QGbhCCQ0fe+uthBheUJHdkDm724doznI/ZA3ry4sXCT4SYW8QKG4NDxO25MvA9hyCGv1D0E
gPPJNX7focQF4Jh5pU1i8RdvhNciMAwTKYxb77lSJOoSNVAZNBh1FHoPEKOARl+CFOyog6RBiE91
ifrIPXxRSQVGPSNBNlbUTfI46HWYn+sZ78BENmwSAgCN/vycGpqaXiUCcjCWr66mpoJlVb8xnurR
yMvpRIgT8AVuOMQe4AbEDTYlxUWl5voFpcZNh2WHMQaImxo3K2IPsH4CwzCMHdCDiLoFDb1swLGy
o0rmjkaRBwH1CxYnU8F0ZjnsALJ2uY0D/kY5Mv6gqLzZ4zj4id4EudZJp58HLKbviXmTgGl4cL5t
DnrAMKUHN468SeCeZZ5+uGx1nYGNOxrEzTMh2SVcOUD2MwQCeptShC49dNNh9gGmL/qizDAsWTsb
eelhhmFsg17QOVk1XQHNEBrzzWZAMsg26hWZjRXDnyrILop9UQ+W1bqTMX1vmANpBrAfZlEhCBK/
q7MppFHA7+ilUGdWMJFHzJqELZXNIlgHDT5uDrhfjNHbAYYAvQdo/HEDyVgARPx/vmg3JW3y7ClA
8qLqxo6ulQDlzIB233FCDMMwYaOwosUjvgC9nSnKQwmSJCHIOXlrvXgP9aSMW8ja1djVc4AgRQCD
gWBp1Il4b5ZZL9ab5SAbqzwWJPY1tkWsVKqXnlim74lJk4AneCzEgwtWSrrl7J32F+dJ2uzOcY6b
B0MK6P5H1kAkClLxnJjIMAwTGaCnUj7low6MT60y3+kGeU1gEpA7BRkWJTAE2A/TmuVy7tuMB6HJ
qS5KzKimWkuAInoMUA7MgTQKUngdvQt4+MJ2W416FKYjWlZ/7c/EhEnAkz9WPMM0IDzVA6x0hq4y
98XvDgT0Nz2ntqmDths3wbfGTSEDedADgeAcV4O9XgiGYZhIYrtRN+JBB433hA09E7MNXYEsqe7U
6iqoM2EUnE5rHm6UBXNhNQrSqCC5E84HwrFlQDbTN8SESUAMALq6cFFjiAH5AZCtMHlLvUhHqkbu
+gILF+GmQDnIQ5CQ5i4XC6RUNXZQ/m77vRAMwzCRAPIjoB7zZhIAAqWRJEnFW8whhhmwxHSWZcl0
BHFjurV7FoQ7nktN7W41DdI4oM7FtHCmb+j3JqGuuV0MI8AJw6Gia0y3aAmGIBDBi2QhSCyUmF4l
khkVVjSLzGLohptrzvnFxS1SERtmAW4XhgPbpG5z5qgZhmH6GgRUY2o1Gu9E44HKG18u3t2VY8Ub
6LHFjC807HVNnvXstPRq8TrqT9THyKuA+ha/o171ZxSs5TG9Q/80CUaD39DaKdKFfrmklFZurhM5
AlYYjX6Fj7zjKVu71zrAUAQuTBgB7IvMhUh9jNenGIYBF/cE4wJmY8AwTLSD+g0BhLOzupeGl6DD
AInQ8IBlZ8YiFpXDtsXGAxaQgd25Rj0KQzDCqEMxq0xlXrZ7WXmdSYBgFDAsjN/xsIZETeiVYMJP
vzIJuIAR7IJpiOu31IspPE7BzbC7ptWQPsYgLtm9miLDMEx/Ag9AGEK1guBG9CIUmLOyJMjZgmEF
9LouyutpLsB648EKcVuzM2tofm6NMCJyhgSGeTcadTTWksHaEb5MAgSjgF4I9HjAMCBewXpOTOiJ
iZiEUNLc3sndXgzD9Duw2qw1HwJAkDcWdUMsljptG0MP2B6NO3oIJqf0NBgIdsT7EBp25H+RIBmd
e+n47jUenMg9PGKUxx0KYYVNAsMwDCNAPoMiyxTudVvqRQ8rMjAig6IK3oN5wFM+ci5YwWqTmNoI
I4BGHQmcAMwGGnr0DFgbf7uCsZiJoQw2CWGFTQLDMAzThTU3AVLO7zAXirOC9M7umWPu3gBvgY9V
De4AcrlUPLI0wjzIIMZAehJgTpYW8DoQ4YZNAsMwDOMTLCdvZUFujUirXNPUIeIMZG8BehQ2WqY/
AmSaRRI7mY4e241bV0lFFc00x0ZMglUYqsCxmfDCJoFhGIbxSXldm8dS8sgsi54AlfFGw42eAQw9
oNfA23RJaRK+XLK7q0wER8JkYF+dIdAJx5cr8TLhg00CwzAM4whkmFXTLmNmGXoGZG8AGnvMPkCM
gw7kZkA+BaxoK0EiJycxCgiE9FY+EzrYJDAMwzBBgcWiMPV85sZqkUURjbgwCivLRFI6lW1VLWKp
aeSgwXYAwZKYgqmaAH+ShoIJL2wSGIZhmIBo7+ikupbuuABMebT2BgxKKqU2JXRgbXG9MAQwE1hC
H2BhPazpoO5nRxhy8JbThgkNbBIYhmGYgEAW2t3monmYaaCLK0ACJRWEIciU9lnKcAH+dhKTAHVN
g2TCBpsEhmEYJmiQrh6GQOZNkA050jDnlzaJQMY2M68znv4/W7hL/C7R9ULYEdLnW5elZkIHmwSG
YRgmZBSWN4seBTTgMAsjVleImAOR8r62e2igptmzYUdWR6c9CRCOlRlACn7GHmwSGIZhmJCBFXHR
m4AGHHEH09LdCZaa1cAEC4hTwGwFmAQ5jdKuYcCxkjZxUqVwwSaBYRiGcYy3FSGx+i4CE2Ujj8Z/
jWECBi3HMv36YYFvl5WK+ALEJUxIrhT74287RgHlJ29pMEtiQg2bBIZhGMYxrR1kNOSV2oZ/bXGD
SNUsG3I87aOHAEMDE5NdVKtkSkRCpIFJZTQrs1qkbwZYIRIpnq3xDTrBUJR4SdzEBA+bBIZhGCYg
sAbD5JTulM3oXWg3l4rEEtHWBh0NPnoLrEmQkEsBwxGL8mup0ZxSuaWihcYa+8hhCGtZsrzvV/Zc
WIoJHWwSGIZhmIDAk/80LNcscI8/LMirFXEIU7zMVsD0Ryw/XVmPrI2ecQr5pc3a1SS9TY9EWYuM
4zHhg00CwzAMExBIptRhtvNp2xvJZQ4XSLCGAxp3LPykNvJo3L9YvJuaWj0DG5CuGfEJ+bs9F4ga
n9zTcKA8TH+satTHOTChgU0CwzAMEzQwCEmb6yhLmY64OL9WDBfgaR/ZEdGwQ3htbk6NuVU3210t
tLKwvsdwRNKmuq4ZE1L4e152zzKY0MImgWEYhgkZCWlVVFjuDiTEIo1YpwEgVwICFzFrAUGJErmQ
I3olZLIlK3m7mzxMBnoV0BuBAEcmvLBJYBiGYUJG2rYGGqYsI11qpm0GGH5AY5+yzd1TsKygjlqV
Jah98WNOjeiBgNHACpLFFc3mO0w4YZPAMAzDhJSBy0ope5dnXEFVY4eY5piytUGYhZFrKkRjL3sS
/FHZ0E5xGyppc1kLNWH+JdMrsElgGIZhQkpNUzt9s8w9S2FZQS3lWAwDEi4hpgC9AjmWIEVvdNp1
E0xIYZPAMAzDhJzMnU0isBCNu3XWQ01jh1gMClMbN5fxsEEkwyaBYRiGCQuzM2tEEGNNUweZOZa6
GL++kr5aUmo7JoHpG9gkMAzDMGEjPrU7I6OVYqRTZo8Q0bBJYBiGYRhGA9H/A2JziAy4le9VAAAA
AElFTkSuQmCC')
	#endregion
	$picturebox1.Location = '218, 42'
	$picturebox1.Name = 'picturebox1'
	$picturebox1.Size = '574, 325'
	$picturebox1.TabIndex = 20
	$picturebox1.TabStop = $False
	#
	# comboboxdept
	#
	$comboboxdept.FormattingEnabled = $True
	[void]$comboboxdept.Items.Add("$DeptList")
	$comboboxdept.Location = '12, 248'
	$comboboxdept.Name = 'comboboxdept'
	$comboboxdept.Size = '171, 21'
	$comboboxdept.TabIndex = 5
	#
	# textboxJT
	#
	$textboxJT.Location = '12, 199'
	$textboxJT.Name = 'textboxJT'
	$textboxJT.Size = '171, 20'
	$textboxJT.TabIndex = 4
	#
	# labelJobTitle
	#
	$labelJobTitle.Font = 'Microsoft Sans Serif, 15pt'
	$labelJobTitle.Location = '12, 173'
	$labelJobTitle.Name = 'labelJobTitle'
	$labelJobTitle.Size = '171, 23'
	$labelJobTitle.TabIndex = 16
	$labelJobTitle.Text = 'Job Title'
	#
	# buttonCreateAccounts
	#
	$buttonCreateAccounts.Location = '12, 432'
	$buttonCreateAccounts.Name = 'buttonCreateAccounts'
	$buttonCreateAccounts.Size = '212, 105'
	$buttonCreateAccounts.TabIndex = 11
	$buttonCreateAccounts.Text = 'Create Accounts'
	$buttonCreateAccounts.UseVisualStyleBackColor = $True
	$buttonCreateAccounts.add_Click($buttonCreateAccounts_Click)
	#
	# labelPassword
	#
	$labelPassword.Font = 'Microsoft Sans Serif, 15pt'
	$labelPassword.Location = '12, 321'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '171, 23'
	$labelPassword.TabIndex = 14
	$labelPassword.Text = 'Password'
	#
	# textboxPW
	#
	$textboxPW.Location = '12, 347'
	$textboxPW.Name = 'textboxPW'
	$textboxPW.Size = '171, 20'
	$textboxPW.TabIndex = 7
	$textboxPW.Text = 'Worksafe2017'
	$textboxPW.UseSystemPasswordChar = $True
	#
	# labelDepartment
	#
	$labelDepartment.Font = 'Microsoft Sans Serif, 15pt'
	$labelDepartment.Location = '12, 222'
	$labelDepartment.Name = 'labelDepartment'
	$labelDepartment.Size = '171, 23'
	$labelDepartment.TabIndex = 8
	$labelDepartment.Text = 'Department'
	#
	# textboxLN
	#
	$textboxLN.Location = '12, 118'
	$textboxLN.Name = 'textboxLN'
	$textboxLN.Size = '171, 20'
	$textboxLN.TabIndex = 2
	#
	# labelLastName
	#
	$labelLastName.Font = 'Microsoft Sans Serif, 15pt'
	$labelLastName.Location = '12, 92'
	$labelLastName.Name = 'labelLastName'
	$labelLastName.Size = '171, 23'
	$labelLastName.TabIndex = 3
	$labelLastName.Text = 'Last Name'
	#
	# labelFirstName
	#
	$labelFirstName.Font = 'Microsoft Sans Serif, 15pt'
	$labelFirstName.Location = '12, 43'
	$labelFirstName.Name = 'labelFirstName'
	$labelFirstName.Size = '171, 23'
	$labelFirstName.TabIndex = 2
	$labelFirstName.Text = 'First Name'
	#
	# textboxFN
	#
	$textboxFN.Location = '12, 69'
	$textboxFN.Name = 'textboxFN'
	$textboxFN.Size = '171, 20'
	$textboxFN.TabIndex = 1
	#
	# Title
	#
	$Title.BorderStyle = 'FixedSingle'
	$Title.Font = 'Microsoft Sans Serif, 20pt, style=Bold'
	$Title.Location = '0, 0'
	$Title.Name = 'Title'
	$Title.Size = '979, 39'
	$Title.TabIndex = 0
	$Title.Text = 'Pogo New User Creation'
	$Title.TextAlign = 'MiddleCenter'
	#
	# buttonButton1
	#
	$buttonButton1.Location = '853, 270'
	$buttonButton1.Name = 'buttonButton1'
	$buttonButton1.Size = '184, 51'
	$buttonButton1.TabIndex = 37
	$buttonButton1.Text = 'button1'
	$buttonButton1.UseVisualStyleBackColor = $True
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: ChildForm.psf
function Show-ChildForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formActiveDirectoryGroup = New-Object 'System.Windows.Forms.Form'
	$labelChooseGroupsToAddFor = New-Object 'System.Windows.Forms.Label'
	$checkedlistboxGroupMembership = New-Object 'System.Windows.Forms.CheckedListBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formActiveDirectoryGroup_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	Update-ListBox $checkedlistboxGroupMembership (Get-ADGroup -Filter ("Name -like '*Usr.*'") | Where-Object Name -NotLike '*.Shdw*' | Select-Object Name | Sort-Object Name) "Name"
	$GroupMembership = New-Object System.Collections.ArrayList
	$un = $Global:GlobalUN
	$buttonOK_Click={
		#TODO: Place custom script here
		ForEach ($GroupMembership in $GroupMembership) {Add-ADGroupMember -Identity $GroupMembership -Members $un}
	}
	
	$checkedlistboxGroupMembership_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ItemCheckEventArgs]
		#TODO: Place custom script here
		$GroupMembership.Add($checkedlistboxGroupMembership.Text) > $null
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formActiveDirectoryGroup.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildForm_checkedlistboxGroupMembership = $checkedlistboxGroupMembership.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$checkedlistboxGroupMembership.remove_ItemCheck($checkedlistboxGroupMembership_ItemCheck)
			$buttonOK.remove_Click($buttonOK_Click)
			$formActiveDirectoryGroup.remove_Load($formActiveDirectoryGroup_Load)
			$formActiveDirectoryGroup.remove_Load($Form_StateCorrection_Load)
			$formActiveDirectoryGroup.remove_Closing($Form_StoreValues_Closing)
			$formActiveDirectoryGroup.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formActiveDirectoryGroup.SuspendLayout()
	#
	# formActiveDirectoryGroup
	#
	$formActiveDirectoryGroup.Controls.Add($labelChooseGroupsToAddFor)
	$formActiveDirectoryGroup.Controls.Add($checkedlistboxGroupMembership)
	$formActiveDirectoryGroup.Controls.Add($buttonOK)
	$formActiveDirectoryGroup.Controls.Add($buttonCancel)
	$formActiveDirectoryGroup.AutoScaleDimensions = '6, 13'
	$formActiveDirectoryGroup.AutoScaleMode = 'Font'
	$formActiveDirectoryGroup.ClientSize = '1351, 514'
	$formActiveDirectoryGroup.Name = 'formActiveDirectoryGroup'
	$formActiveDirectoryGroup.StartPosition = 'CenterParent'
	$formActiveDirectoryGroup.Text = 'Active Directory Groups'
	$formActiveDirectoryGroup.add_Load($formActiveDirectoryGroup_Load)
	#
	# labelChooseGroupsToAddFor
	#
	$labelChooseGroupsToAddFor.Font = 'Microsoft Sans Serif, 15pt'
	$labelChooseGroupsToAddFor.Location = '41, 9'
	$labelChooseGroupsToAddFor.Name = 'labelChooseGroupsToAddFor'
	$labelChooseGroupsToAddFor.Size = '725, 30'
	$labelChooseGroupsToAddFor.TabIndex = 33
	$labelChooseGroupsToAddFor.Text = "Choose Groups to add for $Global:GlobalUN"
	#
	# checkedlistboxGroupMembership
	#
	$checkedlistboxGroupMembership.CheckOnClick = $True
	$checkedlistboxGroupMembership.ColumnWidth = 200
	$checkedlistboxGroupMembership.FormattingEnabled = $True
	$checkedlistboxGroupMembership.Location = '41, 42'
	$checkedlistboxGroupMembership.MultiColumn = $True
	$checkedlistboxGroupMembership.Name = 'checkedlistboxGroupMembership'
	$checkedlistboxGroupMembership.Size = '1297, 379'
	$checkedlistboxGroupMembership.TabIndex = 2
	$checkedlistboxGroupMembership.add_ItemCheck($checkedlistboxGroupMembership_ItemCheck)
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '1183, 479'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 1
	$buttonOK.Text = '&OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.CausesValidation = $False
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '1264, 479'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 0
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseVisualStyleBackColor = $True
	$formActiveDirectoryGroup.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formActiveDirectoryGroup.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formActiveDirectoryGroup.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formActiveDirectoryGroup.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formActiveDirectoryGroup.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formActiveDirectoryGroup.ShowDialog()

}
#endregion Source: ChildForm.psf

#region Source: ChildFormQ.psf
function Show-ChildFormQ_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formActiveDirectoryGroup = New-Object 'System.Windows.Forms.Form'
	$labelChooseGroupsToAddFor = New-Object 'System.Windows.Forms.Label'
	$checkedlistboxGroupMembership = New-Object 'System.Windows.Forms.CheckedListBox'
	$buttonOK = New-Object 'System.Windows.Forms.Button'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formActiveDirectoryGroup_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	
	#region Control Helper Functions
	function Get-CheckedNode
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNode $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
				[ValidateNotNull()]
				[System.Windows.Forms.TreeNodeCollection]$NodeCollection,
				[ValidateNotNull()]
				[System.Collections.ArrayList]$CheckedNodes
		)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNode $Node.Nodes $CheckedNodes
		}
	}
	
	
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]
			$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	##Pull Group Data
	$ConnectionString = 'server=pgosqlp03;database=Qualtrax;trusted_connection=true;'
	
	## SQL Query
	$SqlConnection = New-Object System.Data.SqlClient.SqlConnection
	$SqlConnection.ConnectionString = $ConnectionString
	
	$SqlCmd = New-Object System.Data.SqlClient.SqlCommand
	$sqlcmd.CommandText = 'SELECT TOP 1000 Id,Name FROM Qualtrax.dbo.UG_UserGroup WHERE IsGroup = 1 AND Enabled = 1 ORDER BY NAME'
	$sqlcmd.Connection = $SqlConnection
	$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
	$SqlAdapter.SelectCommand = $SqlCmd
	$DataSet = New-Object System.Data.DataSet
	$SqlAdapter.Fill($DataSet)
	$SqlConnection.Close()
	
	$GroupHash = @{}
	
	ForEach ($Row in $DataSet.Tables[0].Rows)
	{
		$GroupHash.Add($($Row.Name), ($Row.Id))
	}
	
	
	
	
	
	## Find UserID
	$un = $Global:GlobalUN
	$search = "'" + $un + "'"
	$SqlConnection = New-Object System.Data.SqlClient.SqlConnection
	$SqlConnection.ConnectionString = $ConnectionString
	$SqlCmd = New-Object System.Data.SqlClient.SqlCommand
	$sqlcmd.CommandText = "SELECT TOP 1 Id FROM Qualtrax.dbo.UG_UserGroup WHERE USERID = $search"
	$sqlcmd.Connection = $SqlConnection
	$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter
	$SqlAdapter.SelectCommand = $SqlCmd
	$DataSet = New-Object System.Data.DataSet
	$SqlAdapter.Fill($DataSet)
	$SqlConnection.Close()
	
	$UID = foreach ($Row in $dataset.Tables[0].Rows)
	{
		"$($Row.Id)"
	}
	
	Update-ListBox $checkedlistboxGroupMembership ($GroupHash.Keys | Out-String -Stream)
	$GroupMembership = New-Object System.Collections.ArrayList
	
	$buttonOK_Click={
		#TODO: Place custom script here
		## Create Members Array
		$members = @($UID)
		$JSON = Convertto-JSON @{
			'Members' = $members
		}
		$Header = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
		$Header.add('Accept', 'application/json')
		$Header.add('User-Agent', 'PogoNewUser')
		$Header.add('Content-Type', 'application/json')
		$Header.add('Authorization', 'Bearer 3f7d71b0-bb8b-4bf7-a7ce-0712268a0432')
		ForEach ($GroupMembership in $GroupMembership)
		{
			$add = $GroupMembership
			$GID = $GroupHash[$add]
			Try { Invoke-WebRequest -uri "http://qualtrax.smmpogo.loc/api/groups/$GID/members" -Method POST -Headers $Header -Body $JSON }
			Catch
			{
				[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
				[Windows.Forms.MessageBox]::Show('Qualtrax Group Membership Failed.  Please add manually', 'Error', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
			}
		}
	}
	
	$checkedlistboxGroupMembership_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ItemCheckEventArgs]
		#TODO: Place custom script here
		$GroupMembership.Add($checkedlistboxGroupMembership.Text) > $null
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formActiveDirectoryGroup.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildFormQ_checkedlistboxGroupMembership = $checkedlistboxGroupMembership.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$checkedlistboxGroupMembership.remove_ItemCheck($checkedlistboxGroupMembership_ItemCheck)
			$buttonOK.remove_Click($buttonOK_Click)
			$formActiveDirectoryGroup.remove_Load($formActiveDirectoryGroup_Load)
			$formActiveDirectoryGroup.remove_Load($Form_StateCorrection_Load)
			$formActiveDirectoryGroup.remove_Closing($Form_StoreValues_Closing)
			$formActiveDirectoryGroup.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formActiveDirectoryGroup.SuspendLayout()
	#
	# formActiveDirectoryGroup
	#
	$formActiveDirectoryGroup.Controls.Add($labelChooseGroupsToAddFor)
	$formActiveDirectoryGroup.Controls.Add($checkedlistboxGroupMembership)
	$formActiveDirectoryGroup.Controls.Add($buttonOK)
	$formActiveDirectoryGroup.Controls.Add($buttonCancel)
	$formActiveDirectoryGroup.AutoScaleDimensions = '6, 13'
	$formActiveDirectoryGroup.AutoScaleMode = 'Font'
	$formActiveDirectoryGroup.ClientSize = '1351, 514'
	$formActiveDirectoryGroup.Name = 'formActiveDirectoryGroup'
	$formActiveDirectoryGroup.StartPosition = 'CenterParent'
	$formActiveDirectoryGroup.Text = 'Active Directory Groups'
	$formActiveDirectoryGroup.add_Load($formActiveDirectoryGroup_Load)
	#
	# labelChooseGroupsToAddFor
	#
	$labelChooseGroupsToAddFor.Font = 'Microsoft Sans Serif, 15pt'
	$labelChooseGroupsToAddFor.Location = '41, 9'
	$labelChooseGroupsToAddFor.Name = 'labelChooseGroupsToAddFor'
	$labelChooseGroupsToAddFor.Size = '725, 30'
	$labelChooseGroupsToAddFor.TabIndex = 33
	$labelChooseGroupsToAddFor.Text = "Choose Groups to add for $Global:GlobalUN"
	#
	# checkedlistboxGroupMembership
	#
	$checkedlistboxGroupMembership.CheckOnClick = $True
	$checkedlistboxGroupMembership.ColumnWidth = 200
	$checkedlistboxGroupMembership.FormattingEnabled = $True
	$checkedlistboxGroupMembership.Location = '41, 42'
	$checkedlistboxGroupMembership.MultiColumn = $True
	$checkedlistboxGroupMembership.Name = 'checkedlistboxGroupMembership'
	$checkedlistboxGroupMembership.Size = '1297, 379'
	$checkedlistboxGroupMembership.TabIndex = 2
	$checkedlistboxGroupMembership.add_ItemCheck($checkedlistboxGroupMembership_ItemCheck)
	#
	# buttonOK
	#
	$buttonOK.Anchor = 'Bottom, Right'
	$buttonOK.DialogResult = 'OK'
	$buttonOK.Location = '1183, 479'
	$buttonOK.Name = 'buttonOK'
	$buttonOK.Size = '75, 23'
	$buttonOK.TabIndex = 1
	$buttonOK.Text = '&OK'
	$buttonOK.UseVisualStyleBackColor = $True
	$buttonOK.add_Click($buttonOK_Click)
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.CausesValidation = $False
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '1264, 479'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 0
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseVisualStyleBackColor = $True
	$formActiveDirectoryGroup.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formActiveDirectoryGroup.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formActiveDirectoryGroup.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formActiveDirectoryGroup.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formActiveDirectoryGroup.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formActiveDirectoryGroup.ShowDialog()

}
#endregion Source: ChildFormQ.psf

#Start the application
Main ($CommandLine)
