#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 50c10463-82d7-4c4b-b30e-6952bf9cd458
# Source File: C:\Users\ehendricks\Documents\SAPIEN\PowerShell Studio\Projects\JDE Stack Reboot\JDE Stack Reboot.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
+AEAAB+LCAAAAAAABACFkV1PwjAUhu9J+A/N7ss+GAhJ6YWZM5j4EUa8NV13JpXSLu2G4d9bXWcg
arzrk77neXNasgGuj2BOGWsZHY8QIk9GvwFvv8DhMxgrtKLJJCLhAP4uFxLWGZ1FPI7S+RQvkuoK
pzwtcTmNAM+Xs6Ssl7xKZwsS+rAf9S3bUwPUic9xkGtZuToUnrdZDx7RdSdktQqigBYtM23XTBpr
+66/kqjYMQPuuDUdBGgDNRhQHPJO8dYttwrW6qj3gG+lLpl8aWwc0P5snT3+x/6Lr9jpd3zPhMq1
OThfHdCBnLC+EPbQr/n9LD09GvEqFJOfgQd2AHqX3SC3Nt+70lLr1skaN0DCH8nxiIQXP/0B3hC3
OPgBAAA=#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.140
     Generated on:       6/6/2017 2:38 PM
     Generated by:       EHendricks
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2017
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
2gMAAB+LCAAAAAAABAC9k0tLAzEQgO+C/yH0vGR33a5rIbsglV4EFVfUazadLcE8yiRpyb+3rVJF
QaGHMJd5MPMxL/YIwm4A4w33nOwUJ61pJxe0nHTnZ4Swe5QrabhaSAV3XEPXe44+rOnaOZb/ih5y
rp0DPSgJ7mB/eWKnnbCo5JCR50/WlBZ7ycg8KB8QWgPBI1cZeQi7GuIW4pN9A9MOTcNrUV+Ws2oK
xdWM5ceqPyl9dB50CgZ9kWZpt44uLGqXhLjfVBoQ8q00q1NYRTXWYzOW5bIueMX/Z71qlaSnuUVI
MzyJILzF2ANupICTbuPvMR7Nj0dj+fdf7t4BtbYVHtoDAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
uw4AAB+LCAAAAAAABAC9V9tu4jAQfa/UfxjlOeJaoF1BpBZaqd12typsd98qJxnAi2Mj24GyX7+O
A/QCaUIvCAkl8Zw5czkeJ+07DMQM5aJHNAFzoajgHadWqjre4QFA+6ekI8oJu6AMf5AIvRtC+YWQ
UWmqhu3yxnIK8v9ioEEvpthx+gulMSr9pjwUc1VKsOm/C9uWXLhfRnFUqiQ/F7ox07HEDsdYS8Jc
uI19RoPvuBiICfKO32qRRtBoVk/qR1g5PnGAm1A6ztD4u+qdh3MiQ9XXJJjcoS+EdiAYUxZKA3W6
gmspmErTNbHfSjFFqRdLH6exFv2AMOzRCHkSlzFtulCtt8sr0zzojQjR8S4MUy6myyhy3af/DKB2
fORCrVnNBSWFd7ysbHPhA3zUjnfVgyUWLBiy0OczE+ESei1ImM38kCy3yxawQudLwzjQsToj8sv1
oSyTT2T1LUVsFuxaBESbCBzPkNfqJxs1ymrRE2EByHMR1ArYD4h/yUN8dLwt0iyndS/ehWvKJ9fE
R/blXWCGiSVMPRHEZo/ptLbv7Ei1ZvZmZbMCWS3Zzl68PU0rgZ3aU7CZfS2mjjeQMRaxt3s4N4cX
e9dkbsZNMMEwqwwPz2xe7ePdBbUfMSUsgzFVJveRJNElp5oSjWo3PdnRbRtcsP4vBVh8ImTGW1yB
LUNYaAY9KbDI+LGKgseIfVNTEpgHU4kK5SypiYkXpmnAQFcRAwFlDw5phz+IITydKSWAw4NfCmFO
9RgCEifFcsHANBDGwHqWxgcP7TUNEodDjRJiha4BJyvmADaiABFrMkLgQluzMZkh+IjcILku5ene
6vmNyj9Yg4/K/SzWOsnwi/XuW5pV7OYQXh+/HxqgjUphBWdHsNsQPS4kyrWEiwSYDsVVaEaN52+/
2mx6MIq9pyomrK8XDM8MtiuYkNljYYvQsguUq7SXN6dKYWRUgWplu3yy8CIVCMmo/wnKapfXXl+z
pFreB8en75d8xuQDaD9EkswpH72Hq1IfNoatYbUaNiqkTvK5/kRsLzl1hcTPJ1rfppJvl59/rHr/
ATn2aQG7DgAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formJDEdwardsStackReboot = New-Object 'System.Windows.Forms.Form'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$linklabelDocumentation = New-Object 'System.Windows.Forms.LinkLabel'
	$labelThisProgramInitiates = New-Object 'System.Windows.Forms.Label'
	$buttonInitiateJDEStackRebo = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formJDEdwardsStackReboot_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	$labelThisProgramInitiates_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonInitiateJDEStackRebo_Click={
		#TODO: Place custom script here
		##TODO: Replace placeholders with active server names
		
		$ErrorActionPreference = 'Stop'
		$Date = Get-Date
		$User = $env:USERNAME
		
		## Confirm initial services shutdown
		$Header = 'Confirmation Required'
		$ConfirmQ = 'Have users been confirmed to have been logged out and the Enterprise and WebServer services stopped via Server Manager on ANCDEPP01?'
		$Choices = New-Object Collections.ObjectModel.Collection[Management.Automation.Host.ChoiceDescription]
		$Choices.add((New-Object Management.Automation.Host.ChoiceDescription -ArgumentList '&Yes'))
		$Choices.add((New-Object Management.Automation.Host.ChoiceDescription -ArgumentList '&No'))
		
		$Decision = $Host.Ui.PromptForChoice($header, $ConfirmQ, $Choices, 1)
		if ($decision -eq 0)
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Confirmed, initiating reboot procedure.', 'Confirmed', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
		}
		Else
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Aborting reboot procedure', 'Aborted', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
			Throw 'Shutdown Procedure Aborted'
			[environment]::exit(0)}
		
		## Prepare Shutdown Reason and Send initial Email
		$SM = "JDE Enviromental Reboot initiated $Date by $user"
		$hash = @{
			'text'	 = "$SM"
			'username' = 'Cthulu, Lord of Slack Messages'
			'icon_url' = 'http://3.bp.blogspot.com/_n-W7KsVCRnU/Sw1VwgplbKI/AAAAAAAAA9s/tOOTBqMlAa4/s1600/CTHULHU%2B11x14.JPG'
		}
		
		$JSON = $hash | convertto-json
		
		$Header = New-Object 'System.Collections.Generic.Dictionary[[String],[String]]'
		$Header.add('content-type', 'application/json')
		Try
		{
			Invoke-WebRequest -uri 'https://hooks.slack.com/services/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' -Method POST -Headers $Header -Body $JSON
		}
		
		Catch
		{
			[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
			[Windows.Forms.MessageBox]::Show('Notification Failure', 'Failure', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
		}
		
		## Restart and check Oracle DB Server and Test Oracle DB Server
		New-EventLog -ComputerName ANCORAP01 -LogName Application -Source 'JD Edwards Powershell' -ErrorAction SilentlyContinue
		Write-EventLog -ComputerName ANCORAP01 -EventId 1555 -LogName Application -Message $SM -Source 'JD Edwards Powershell'
		Restart-Computer -ComputerName ANCORAP01
		New-EventLog -ComputerName ANCORATD01 -LogName Application -Source 'JD Edwards Powershell' -ErrorAction SilentlyContinue
		Write-EventLog -ComputerName ANCORATD01 -EventId 1555 -LogName Application -Message $SM -Source 'JD Edwards Powershell'
		Restart-Computer -ComputerName ANCORATD01
		$statusbar1.Text = 'ANCORAP01 restarted.  Waiting...'
		Start-Sleep 600
		Try { Test-Connection ANCORAP01 }
		Catch
		{
			Write-Host 'DATABASE SERVER FAILED TO RESTART IN TIME.'
			BREAK
		}
		
		
		## Restart and check Enterprise server
		New-EventLog -ComputerName ANCENTP01 -LogName Application -Source 'JD Edwards Powershell'
		Write-EventLog -ComputerName ANCENTP01 -EventId 1555 -LogName Application -Message $SM -Source 'JD Edwards Powershell'
		Restart-Computer -ComputerName ANCENTP01
		$statusbar1.Text = 'ANCENTP01 restarted.  Waiting...'
		Start-Sleep 600
		Try { Test-Connection ANCENTP01 }
		Catch
		{
			Write-Host 'ENTERPRISE SERVER FAILED TO RESTART IN TIME.'
			BREAK
		}
		
		
		## Restart and check Single Sign-On server
		New-EventLog -ComputerName ANCSSOP01 -LogName Application -Source 'JD Edwards Powershell'
		Write-EventLog -ComputerName ANCSSOP01 -EventId 1555 -LogName Application -Message $SM -Source 'JD Edwards Powershell'
		Restart-Computer -ComputerName ANCSSOP01
		$statusbar1.Text = 'ANCENTP01 restarted.  Waiting...'
		Start-Sleep 600
		Try { Test-Connection ANCENTP01 }
		Catch
		{
			Write-Host 'ENTERPRISE SERVER FAILED TO RESTART IN TIME.'
			BREAK
		}
		
		
		## Restart and check Web servers
		New-EventLog -ComputerName  ANCWEBP04 -LogName Application -Source 'JD Edwards Powershell'
		Write-EventLog -ComputerName ANCWEBP04 -EventId 1555 -LogName Application -Message $SM -Source 'JD Edwards Powershell'
		New-EventLog -ComputerName ANCWEBP05 -LogName Application -Source 'JD Edwards Powershell'
		Write-EventLog -ComputerName ANCWEBP05 -EventId 1555 -LogName Application -Message $SM -Source 'JD Edwards Powershell'
		
		
		Restart-Computer -ComputerName ANCWEBP04
		Restart-Computer -ComputerName ANCWEBP05
		$statusbar1.Text = 'ANCWEBP04 and ANCWEBP05 restarted.  Waiting...'
		Start-Sleep 600
		Try { Test-Connection -ComputerName ANCWEBP04 }
		Catch
		{
			Write-Host 'WEB SERVER FAILED TO RESTART IN TIME.'
			BREAK
		}
		
		
		## Restart and check Deployment server
		New-EventLog -ComputerName ANCDEPP01 -LogName Application -Source 'JD Edwards Powershell'
		Write-EventLog -ComputerName ANCDEPP01 -EventId 1555 -LogName Application -Message $SM -Source 'JD Edwards Powershell'
		Restart-Computer -ComputerName ANCDEPP01
		$statusbar1.Text = 'ANCDEPP01 restarted.  Waiting...'
		Start-Sleep 150
		Try { Test-Connection -ComputerName ANCDEPP01 }
		Catch
		{
			Write-Host 'DEPLOYMENT SERVER FAILED TO RESTART IN TIME.'
			BREAK
		}
		
		[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
		[Windows.Forms.MessageBox]::Show('JD Edwards has been rebooted and all servers have connection tested successfully.  Please log in to complete verification.', 'Complete', [Windows.Forms.MessageBoxButtons]::OK, [Windows.Forms.MessageBoxIcon]::Information)
		
		
		
		
		
		
		
		
		
		
	}
	
	$linklabelDocumentation_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
		#TODO: Place custom script here
		(New-Object -Com Shell.Application).Open("http://confluence.smmpogo.loc:8090/x/GYCe")
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formJDEdwardsStackReboot.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabelDocumentation.remove_LinkClicked($linklabelDocumentation_LinkClicked)
			$labelThisProgramInitiates.remove_Click($labelThisProgramInitiates_Click)
			$buttonInitiateJDEStackRebo.remove_Click($buttonInitiateJDEStackRebo_Click)
			$formJDEdwardsStackReboot.remove_Load($formJDEdwardsStackReboot_Load)
			$formJDEdwardsStackReboot.remove_Load($Form_StateCorrection_Load)
			$formJDEdwardsStackReboot.remove_Closing($Form_StoreValues_Closing)
			$formJDEdwardsStackReboot.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formJDEdwardsStackReboot.SuspendLayout()
	#
	# formJDEdwardsStackReboot
	#
	$formJDEdwardsStackReboot.Controls.Add($statusbar1)
	$formJDEdwardsStackReboot.Controls.Add($linklabelDocumentation)
	$formJDEdwardsStackReboot.Controls.Add($labelThisProgramInitiates)
	$formJDEdwardsStackReboot.Controls.Add($buttonInitiateJDEStackRebo)
	$formJDEdwardsStackReboot.AutoScaleDimensions = '6, 13'
	$formJDEdwardsStackReboot.AutoScaleMode = 'Font'
	$formJDEdwardsStackReboot.ClientSize = '284, 261'
	$formJDEdwardsStackReboot.Name = 'formJDEdwardsStackReboot'
	$formJDEdwardsStackReboot.Text = 'JD Edwards Stack Reboot'
	$formJDEdwardsStackReboot.add_Load($formJDEdwardsStackReboot_Load)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 239'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Size = '284, 22'
	$statusbar1.TabIndex = 3
	#
	# linklabelDocumentation
	#
	$linklabelDocumentation.Location = '12, 103'
	$linklabelDocumentation.Name = 'linklabelDocumentation'
	$linklabelDocumentation.Size = '260, 23'
	$linklabelDocumentation.TabIndex = 2
	$linklabelDocumentation.TabStop = $True
	$linklabelDocumentation.Text = 'Documentation'
	$linklabelDocumentation.add_LinkClicked($linklabelDocumentation_LinkClicked)
	#
	# labelThisProgramInitiates
	#
	$labelThisProgramInitiates.AutoSize = $True
	$labelThisProgramInitiates.Location = '12, 9'
	$labelThisProgramInitiates.Name = 'labelThisProgramInitiates'
	$labelThisProgramInitiates.Size = '272, 39'
	$labelThisProgramInitiates.TabIndex = 1
	$labelThisProgramInitiates.Text = 'This program initiates a stack reboot of JD Edwards.  
Use with caution, test all servers and services after use, 
and ensure outage notices have been sent.'
	$labelThisProgramInitiates.add_Click($labelThisProgramInitiates_Click)
	#
	# buttonInitiateJDEStackRebo
	#
	$buttonInitiateJDEStackRebo.Location = '12, 150'
	$buttonInitiateJDEStackRebo.Name = 'buttonInitiateJDEStackRebo'
	$buttonInitiateJDEStackRebo.Size = '260, 81'
	$buttonInitiateJDEStackRebo.TabIndex = 0
	$buttonInitiateJDEStackRebo.Text = 'Initiate JDE Stack Reboot'
	$buttonInitiateJDEStackRebo.UseVisualStyleBackColor = $True
	$buttonInitiateJDEStackRebo.add_Click($buttonInitiateJDEStackRebo_Click)
	$formJDEdwardsStackReboot.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formJDEdwardsStackReboot.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formJDEdwardsStackReboot.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formJDEdwardsStackReboot.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formJDEdwardsStackReboot.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formJDEdwardsStackReboot.ShowDialog()

}
#endregion Source: MainForm.psf

#Start the application
Main ($CommandLine)
